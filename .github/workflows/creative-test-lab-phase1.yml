name: Creative Test Lab Phase1

on:
  workflow_dispatch:
    inputs:
      experiment_description:
        description: '実験内容（例：桜の風景画像を作って）'
        required: true
        type: string

jobs:
  phase1-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup experiment
        id: setup
        run: |
          EXPERIMENT_ID="phase1-$(date +%Y%m%d-%H%M%S)"
          EXPERIMENT_DIR="experiment-results/${EXPERIMENT_ID}"
          mkdir -p "$EXPERIMENT_DIR"/{output,logs}
          echo "experiment-id=$EXPERIMENT_ID" >> $GITHUB_OUTPUT
          echo "experiment-dir=$EXPERIMENT_DIR" >> $GITHUB_OUTPUT
          echo "🧪 Phase 1テスト開始: $EXPERIMENT_ID"
      
      - name: Prepare MCP config
        env:
          MCP_CONFIG: ${{ secrets.MCP_CONFIG }}
        run: |
          EXPERIMENT_DIR="${{ steps.setup.outputs.experiment-dir }}"
          if [ -n "$MCP_CONFIG" ]; then
            echo "$MCP_CONFIG" > "$EXPERIMENT_DIR/mcp-config.json"
            echo "✅ MCP設定を読み込みました"
            echo "📊 MCP設定サーバー数: $(echo "$MCP_CONFIG" | jq '.mcpServers | length' 2>/dev/null || echo 'JSON解析エラー')"
            echo "🔍 imagen4-fast設定確認: $(echo "$MCP_CONFIG" | jq '.mcpServers | has("t2i-fal-imagen4-fast")' 2>/dev/null || echo 'false')"
          else
            echo "❌ MCP_CONFIG secretが設定されていません"
            exit 1
          fi
      
      - name: Test imagen4-fast
        env:
          CLAUDE_ACCESS_TOKEN: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          CLAUDE_EXPIRES_AT: ${{ secrets.CLAUDE_EXPIRES_AT }}
        run: |
          EXPERIMENT_DIR="${{ steps.setup.outputs.experiment-dir }}"
          DESCRIPTION="${{ inputs.experiment_description }}"
          
          echo "🚀 imagen4-fast画像生成テスト開始"
          echo "📝 日本語指示: $DESCRIPTION"
          
          # 英語プロンプト変換
          if [[ "$DESCRIPTION" =~ 桜 ]]; then
            ENGLISH_PROMPT="Beautiful cherry blossoms in full bloom"
          elif [[ "$DESCRIPTION" =~ 花 ]]; then
            ENGLISH_PROMPT="Beautiful colorful flowers in garden"
          else
            ENGLISH_PROMPT="Beautiful landscape artwork"
          fi
          
          echo "🔄 英語プロンプト: $ENGLISH_PROMPT"
          
          # Claude Code実行（詳細ログ付き）
          echo "🤖 Claude Code実行中..."
          echo "📁 設定ファイル: $EXPERIMENT_DIR/mcp-config.json"
          echo "💬 メッセージ: Use mcp__t2i-fal-imagen4-fast__generate to create: $ENGLISH_PROMPT. Save as generated-image.png"
          
          # ログディレクトリ確認
          mkdir -p "$EXPERIMENT_DIR/logs"
          
          # Claude Code実行
          npx claude-code --non-interactive \
            --mcp-config="$EXPERIMENT_DIR/mcp-config.json" \
            --message="Use mcp__t2i-fal-imagen4-fast__generate to create: $ENGLISH_PROMPT. Save as generated-image.png" \
            > "$EXPERIMENT_DIR/logs/claude-output.log" 2>&1
          
          EXIT_CODE=$?
          echo "📊 Claude Code終了コード: $EXIT_CODE"
          
          # ログ内容を表示
          echo "📋 Claude Code実行ログ（最後の10行）:"
          tail -10 "$EXPERIMENT_DIR/logs/claude-output.log" 2>/dev/null || echo "ログファイルが見つかりません"
          
          # 結果確認
          if ls *.png *.jpg 2>/dev/null; then
            echo "✅ 画像生成成功！"
            mv *.png *.jpg "$EXPERIMENT_DIR/output/" 2>/dev/null || true
          else
            echo "⚠️ 画像ファイルが見つかりません"
          fi
          
          ls -la "$EXPERIMENT_DIR/output/" || echo "outputディレクトリが空です"
      
      - name: Save results
        run: |
          EXPERIMENT_ID="${{ steps.setup.outputs.experiment-id }}"
          EXPERIMENT_DIR="${{ steps.setup.outputs.experiment-dir }}"
          
          # 簡単なレポート作成
          echo "# Phase 1テスト結果: $EXPERIMENT_ID" > "$EXPERIMENT_DIR/README.md"
          echo "実験内容: ${{ inputs.experiment_description }}" >> "$EXPERIMENT_DIR/README.md"
          echo "実行日時: $(date)" >> "$EXPERIMENT_DIR/README.md"
          
          if [ -d "$EXPERIMENT_DIR/output" ] && [ "$(ls -A $EXPERIMENT_DIR/output)" ]; then
            echo "ステータス: ✅ 成功" >> "$EXPERIMENT_DIR/README.md"
            for img in "$EXPERIMENT_DIR/output"/*; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                echo "![Generated Image](output/$filename)" >> "$EXPERIMENT_DIR/README.md"
              fi
            done
          else
            echo "ステータス: ❌ 失敗" >> "$EXPERIMENT_DIR/README.md"
          fi
          
          # Git commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add experiment-results/
          git diff --cached --quiet || git commit -m "Phase 1テスト: $EXPERIMENT_ID" && git push