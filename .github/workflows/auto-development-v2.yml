name: Auto Feature Development v2

on:
  workflow_dispatch:
    inputs:
      requirements_file:
        description: '要件定義書のパス'
        required: true
        default: 'docs/requirements/multi-image-generation-requirements.md'
        type: string
      target_module:
        description: '対象モジュール名'
        required: true
        default: 'image-generation-multi'
        type: string
      development_mode:
        description: '開発モード'
        required: false
        default: 'full'
        type: choice
        options:
          - 'analysis_only'
          - 'design_only'
          - 'implement_only'
          - 'full'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  workflows: write

jobs:
  auto-development:
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate GitHub App token
        id: app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-workflows: write
          permission-pull-requests: write
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app_token.outputs.token }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
        
      - name: Verify Requirements File
        run: |
          if [ ! -f "${{ inputs.requirements_file }}" ]; then
            echo "::error::要件定義書が見つかりません: ${{ inputs.requirements_file }}"
            exit 1
          fi
          echo "✅ 要件定義書を確認しました"
          echo "📄 ファイル: ${{ inputs.requirements_file }}"
          
      - name: Phase 1 - Requirements Analysis and Design
        if: ${{ inputs.development_mode == 'full' || inputs.development_mode == 'analysis_only' || inputs.development_mode == 'design_only' }}
        id: analysis
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔍 Phase 1: Requirements Analysis and Design"
          
          REQUIREMENTS_CONTENT=$(cat "${{ inputs.requirements_file }}")
          
          ANALYSIS_PROMPT=$(cat <<'EOF'
          GitHub Actions Automatic Development System - Enhanced with Interface Validation.
          
          Analyze the requirements document and create detailed technical design documents with interface compatibility analysis.
          
          Requirements Document - $REQUIREMENTS_CONTENT
          
          CRITICAL INTERFACE VALIDATION REQUIREMENTS:
          1. **Existing Module Analysis**: Read and analyze ALL existing modules in .github/actions/kamui-modules/
          2. **Downstream Interface Check**: Identify modules that will consume outputs from new module
          3. **Parameter Flow Validation**: Map input/output parameters across module dependencies
          4. **Workflow Integration Analysis**: Analyze existing workflows to understand integration patterns
          
          Files to Create -
          - docs/design/${{ inputs.target_module }}-design.md (Detailed Design Document)
          - docs/design/${{ inputs.target_module }}-implementation-plan.md (Implementation Plan)
          - docs/design/${{ inputs.target_module }}-interface-compatibility.md (Interface Compatibility Analysis)
          
          Interface Compatibility Analysis Must Include:
          - List of modules that will integrate with this new module
          - Parameter mapping for each integration point
          - Required vs optional parameters for downstream modules
          - Backward compatibility validation with existing workflows
          - Error scenarios and compatibility risks
          
          Important: 
          - Must read and analyze existing image-generation/action.yml
          - Must read ALL modules in kamui-modules/ directory
          - Must analyze existing workflows that use similar modules
          - Strictly maintain backward compatibility
          - Follow GitHub Actions best practices
          - PREVENT parameter passing errors by validating downstream interfaces
          EOF
          )
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash,Glob,Grep" \
            --max-turns 50 \
            --verbose \
            --permission-mode "bypassPermissions" \
            -p "$ANALYSIS_PROMPT" 2>&1 | tee analysis_log.txt
            
          if [ $? -eq 0 ]; then
            echo "analysis_completed=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ Phase 1 完了"
          else
            echo "analysis_completed=false" >> $GITHUB_OUTPUT
            echo "::error::❌ Phase 1 失敗"
            exit 1
          fi
          
      - name: Phase 2 - Implementation
        if: ${{ (inputs.development_mode == 'full' || inputs.development_mode == 'implement_only') && steps.analysis.outputs.analysis_completed == 'true' }}
        id: implementation
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🛠️ Phase 2: Implementation"
          
          IMPLEMENTATION_PROMPT=$(cat <<'EOF'
          GitHub Actions Automatic Development System - Phase 2: Enhanced Implementation with Workflow Validation
          
          Implement based on the design documents with strict interface validation:
          
          Implementation Tasks:
          1. Review ALL design documents including interface-compatibility.md
          2. Create new module .github/actions/kamui-modules/${{ inputs.target_module }}/
          3. Implement action.yml with validated interfaces
          4. Create README.md
          5. **NEW**: Generate or update workflow files that use this module
          6. **NEW**: Validate workflow parameter passing before saving
          
          CRITICAL WORKFLOW VALIDATION:
          - If creating/updating workflows, validate ALL parameter passing
          - Check that downstream modules accept the parameters being passed
          - Ensure required parameters are provided to downstream modules
          - Cross-reference interface-compatibility.md for validation rules
          
          Implementation Requirements:
          - Maintain compatibility with existing image-generation module
          - Complete implementation of new features (N-image generation, model comparison)
          - Proper error handling
          - Follow GitHub Actions best practices
          - **VALIDATE**: All workflow integrations before completion
          - **PREVENT**: Parameter passing errors through pre-validation
          
          Workflow File Requirements (if applicable):
          - Generate test workflows in .github/workflows/
          - Ensure ALL parameter mappings are validated
          - Include proper error handling
          - Test integration points thoroughly
          EOF
          )
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Edit,Bash,Glob,Grep" \
            --max-turns 80 \
            --verbose \
            --permission-mode "bypassPermissions" \
            -p "$IMPLEMENTATION_PROMPT" 2>&1 | tee implementation_log.txt
            
          if [ $? -eq 0 ]; then
            echo "implementation_completed=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ Phase 2 完了"
          else
            echo "implementation_completed=false" >> $GITHUB_OUTPUT
            echo "::error::❌ Phase 2 失敗"
            exit 1
          fi
          
      - name: Phase 3 - Testing and Validation
        if: ${{ steps.implementation.outputs.implementation_completed == 'true' }}
        id: testing
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🧪 Phase 3: Testing and Validation"
          
          TESTING_PROMPT=$(cat <<'EOF'
          GitHub Actions Automatic Development System - Phase 3: Enhanced Testing and Workflow Validation
          
          Perform comprehensive quality assurance for the implemented module and workflows:
          
          Module Test Items:
          1. action.yml syntax check
          2. Required input parameter verification
          3. Output specification validation
          4. Error handling verification
          5. Documentation completeness check
          
          **NEW: WORKFLOW INTEGRATION TESTING**:
          6. Workflow syntax validation (YAML lint)
          7. Parameter flow analysis across all steps
          8. Downstream module interface validation
          9. Required parameter presence check
          10. Invalid parameter detection and removal
          
          Interface Validation Checks:
          - Verify all outputs match downstream input requirements
          - Check for unused/invalid parameters being passed
          - Validate required parameters are provided
          - Test parameter data type compatibility
          - Cross-reference interface-compatibility.md
          
          Quality Checks:
          - Code review (best practices compliance)
          - Security check
          - Performance considerations verification
          - **Workflow integration soundness**
          - **Parameter passing error prevention**
          
          Report Creation:
          - Test results report creation
          - Workflow validation results
          - Interface compatibility confirmation
          - Parameter flow analysis report
          - Issues and improvement suggestions
          - Implementation completion summary
          
          If Issues Are Found:
          - Automatically implement fixes
          - Fix workflow parameter passing errors
          - Update interface documentation
          - Record fix details in report
          - Re-validate after fixes
          EOF
          )
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Edit,Bash,Glob,Grep" \
            --max-turns 40 \
            --verbose \
            --permission-mode "bypassPermissions" \
            -p "$TESTING_PROMPT" 2>&1 | tee testing_log.txt
            
          if [ $? -eq 0 ]; then
            echo "testing_completed=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ Phase 3 完了"
          else
            echo "testing_completed=false" >> $GITHUB_OUTPUT
            echo "::warning::⚠️ Phase 3 で問題検出"
          fi
          
      - name: Commit and Create PR
        if: ${{ steps.analysis.outputs.analysis_completed == 'true' }}
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          # Git設定
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # ブランチ作成
          BRANCH_NAME="auto-dev/${{ inputs.target_module }}-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # 変更をコミット
          git add docs/design/ || true
          git add docs/requirements/ || true  
          git add .github/actions/kamui-modules/${{ inputs.target_module }}/ || true
          git add .github/workflows/ || true
          
          if git diff --cached --quiet; then
            echo "::notice::コミットする変更がありません"
          else
            git commit -m "Auto-implement ${{ inputs.target_module }} module - Generated with Claude Code SDK Auto-Development System - Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin "$BRANCH_NAME"
            
            # PR作成
            gh pr create \
              --title "Auto-implement: ${{ inputs.target_module }} module" \
              --body "Auto-Development System Implementation - Requirements: ${{ inputs.requirements_file }}, Module: ${{ inputs.target_module }}, Mode: ${{ inputs.development_mode }}" \
              --assignee "${{ github.actor }}"
              
            echo "✅ PR作成完了: $BRANCH_NAME"
          fi
          
      - name: Final Summary
        if: ${{ always() }}
        run: |
          echo "📊 Auto-Development Summary"
          echo "============================================="
          echo "🎯 Target Module: ${{ inputs.target_module }}"
          echo "📄 Requirements: ${{ inputs.requirements_file }}"
          echo "🔧 Development Mode: ${{ inputs.development_mode }}"
          echo ""
          echo "📈 Phase Results:"
          echo "  🔍 Analysis: ${{ steps.analysis.outputs.analysis_completed || 'not_run' }}"
          echo "  🛠️ Implementation: ${{ steps.implementation.outputs.implementation_completed || 'not_run' }}"
          echo "  🧪 Testing: ${{ steps.testing.outputs.testing_completed || 'not_run' }}"
          echo ""
          echo "🤖 GitHub Actions Auto-Development Experiment"
          echo "============================================="