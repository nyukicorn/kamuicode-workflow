name: Complete Creative Pipeline with Multi Image Generation v3
on:
  workflow_dispatch:
    inputs:
      image-prompt:
        description: 'Image generation prompt'
        required: true
        default: 'Ethereal fantasy landscape with magical glowing trees and mystical creatures'
      image-count:
        description: 'Number of images to generate (1-10)'
        required: false
        default: '3'
      models:
        description: 'Models to use (comma-separated)'
        required: false
        default: 'imagen4-fast,flux-schnell'
      enable-comparison:
        description: 'Enable model comparison'
        required: false
        type: boolean
        default: true
      create-video:
        description: 'Create video from generated images'
        required: false
        type: boolean
        default: true
      create-3d-experience:
        description: 'Create Three.js 3D experience'
        required: false
        type: boolean
        default: true

jobs:
  # Input validation and parameter verification
  validate-pipeline-inputs:
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.validation-passed }}
      total-expected-images: ${{ steps.validate.outputs.total-expected-images }}
    steps:
      - name: Validate Pipeline Parameters
        id: validate
        run: |
          echo "üîç Validating complete pipeline parameters..."
          
          # Validate image count
          IMAGE_COUNT="${{ github.event.inputs.image-count }}"
          if [[ ! "$IMAGE_COUNT" =~ ^[0-9]+$ ]] || [ "$IMAGE_COUNT" -lt 1 ] || [ "$IMAGE_COUNT" -gt 10 ]; then
            echo "::error::‚ùå Invalid image count: $IMAGE_COUNT. Must be between 1 and 10."
            exit 1
          fi
          
          # Validate models
          MODELS="${{ github.event.inputs.models }}"
          IFS=',' read -ra MODEL_ARRAY <<< "$MODELS"
          for model in "${MODEL_ARRAY[@]}"; do
            model=$(echo "$model" | xargs)
            case "$model" in
              "auto"|"imagen4-ultra"|"imagen4-fast"|"imagen3"|"flux-schnell"|"photo-flux")
                ;;
              *)
                echo "::error::‚ùå Invalid model: $model"
                exit 1
                ;;
            esac
          done
          
          # Calculate total expected images
          MODEL_COUNT=${#MODEL_ARRAY[@]}
          TOTAL_EXPECTED=$((MODEL_COUNT * IMAGE_COUNT))
          
          echo "‚úÖ Pipeline validation passed"
          echo "  Image count: $IMAGE_COUNT"
          echo "  Models: ${MODEL_ARRAY[*]}"
          echo "  Total expected images: $TOTAL_EXPECTED"
          
          echo "validation-passed=true" >> $GITHUB_OUTPUT
          echo "total-expected-images=$TOTAL_EXPECTED" >> $GITHUB_OUTPUT

  # Setup project structure
  setup-creative-project:
    needs: validate-pipeline-inputs
    runs-on: ubuntu-latest
    outputs:
      folder-name: ${{ steps.setup.outputs.folder-name }}
      branch-name: ${{ steps.setup.outputs.branch-name }}
    steps:
      - name: Setup Project Branch
        id: setup
        uses: ./.github/actions/kamui-modules/setup-branch
        with:
          branch-name: ${{ github.ref_name }}
      
      - name: Verify Project Setup
        run: |
          echo "üìÅ Project setup completed:"
          echo "  Folder: ${{ steps.setup.outputs.folder-name }}"
          echo "  Branch: ${{ steps.setup.outputs.branch-name }}"
          
          # Validate setup outputs for downstream modules
          if [ -z "${{ steps.setup.outputs.folder-name }}" ]; then
            echo "::error::‚ùå folder-name output is required for all downstream modules"
            exit 1
          fi
          
          if [ -z "${{ steps.setup.outputs.branch-name }}" ]; then
            echo "::error::‚ùå branch-name output is required for all downstream modules"
            exit 1
          fi
          
          echo "‚úÖ Project setup validated for downstream integration"

  # Enhanced multi-image generation with v3 module
  generate-creative-images:
    needs: [validate-pipeline-inputs, setup-creative-project]
    runs-on: ubuntu-latest
    outputs:
      # Critical outputs for backward compatibility
      google-image-url: ${{ steps.generate.outputs.google-image-url }}
      # Enhanced outputs from v3
      images-completed: ${{ steps.generate.outputs.images-completed }}
      image-urls: ${{ steps.generate.outputs.image-urls }}
      models-used: ${{ steps.generate.outputs.models-used }}
      comparison-report: ${{ steps.generate.outputs.comparison-report }}
    steps:
      - name: Generate Creative Images with v3
        id: generate
        uses: ./.github/actions/kamui-modules/github-app-fix-multi-image-workflow-v3
        with:
          image-prompt: ${{ github.event.inputs.image-prompt }}
          image-count: ${{ github.event.inputs.image-count }}
          models: ${{ github.event.inputs.models }}
          enable-comparison: ${{ github.event.inputs.enable-comparison }}
          folder-name: ${{ needs.setup-creative-project.outputs.folder-name }}
          branch-name: ${{ needs.setup-creative-project.outputs.branch-name }}
          oauth-token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mcp-config: ${{ secrets.MCP_CONFIG }}
      
      - name: Validate Generation Results
        run: |
          echo "üé® Image generation completed with enhanced v3 module"
          echo "üìä Generation Summary:"
          echo "  Images completed: ${{ steps.generate.outputs.images-completed }}"
          echo "  Total expected: ${{ needs.validate-pipeline-inputs.outputs.total-expected-images }}"
          
          # Calculate success rate
          COMPLETED="${{ steps.generate.outputs.images-completed }}"
          EXPECTED="${{ needs.validate-pipeline-inputs.outputs.total-expected-images }}"
          SUCCESS_RATE=$(( (COMPLETED * 100) / EXPECTED ))
          
          echo "  Success rate: ${SUCCESS_RATE}%"
          
          # Validate critical outputs for downstream compatibility
          if [ -z "${{ steps.generate.outputs.google-image-url }}" ]; then
            echo "::error::‚ùå google-image-url is required for downstream module compatibility"
            exit 1
          fi
          
          # Validate enhanced outputs
          echo '${{ steps.generate.outputs.image-urls }}' | jq . > /dev/null || {
            echo "::error::‚ùå image-urls is not valid JSON"
            exit 1
          }
          
          echo '${{ steps.generate.outputs.models-used }}' | jq . > /dev/null || {
            echo "::error::‚ùå models-used is not valid JSON"
            exit 1
          }
          
          # Success rate validation
          if [ "$SUCCESS_RATE" -lt 80 ]; then
            echo "::warning::‚ö†Ô∏è Low success rate detected: ${SUCCESS_RATE}%"
          else
            echo "‚úÖ Excellent success rate: ${SUCCESS_RATE}%"
          fi
          
          echo "‚úÖ All v3 module outputs validated successfully"

  # Image analysis using generated primary image
  analyze-primary-image:
    needs: [setup-creative-project, generate-creative-images]
    runs-on: ubuntu-latest
    outputs:
      scene-type: ${{ steps.analysis.outputs.scene-type }}
      atmosphere: ${{ steps.analysis.outputs.atmosphere }}
      color-palette: ${{ steps.analysis.outputs.color-palette }}
    steps:
      - name: Analyze Primary Generated Image
        id: analysis
        uses: ./.github/actions/kamui-modules/image-world-analysis
        with:
          # Using backward-compatible output from v3 module
          image-url: ${{ needs.generate-creative-images.outputs.google-image-url }}
          folder-name: ${{ needs.setup-creative-project.outputs.folder-name }}
          branch-name: ${{ needs.setup-creative-project.outputs.branch-name }}
          oauth-token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mcp-config: ${{ secrets.MCP_CONFIG }}
      
      - name: Validate Analysis Integration
        run: |
          echo "üîç Image analysis completed using v3 module output"
          echo "  Primary image URL: ${{ needs.generate-creative-images.outputs.google-image-url }}"
          echo "  Scene type: ${{ steps.analysis.outputs.scene-type }}"
          echo "  Atmosphere: ${{ steps.analysis.outputs.atmosphere }}"
          
          # Confirm successful parameter passing from v3 to analysis module
          if [ -n "${{ steps.analysis.outputs.scene-type }}" ]; then
            echo "‚úÖ Successful parameter flow: v3 ‚Üí image-world-analysis"
          else
            echo "::warning::‚ö†Ô∏è Potential parameter flow issue detected"
          fi

  # Create video from generated images (conditional)
  create-video-content:
    if: github.event.inputs.create-video == 'true'
    needs: [setup-creative-project, generate-creative-images]
    runs-on: ubuntu-latest
    outputs:
      video-url: ${{ steps.video.outputs.video-url }}
    steps:
      - name: Generate Video from Primary Image
        id: video
        uses: ./.github/actions/kamui-modules/video-generation
        with:
          # Using backward-compatible output from v3 module
          image-url: ${{ needs.generate-creative-images.outputs.google-image-url }}
          folder-name: ${{ needs.setup-creative-project.outputs.folder-name }}
          branch-name: ${{ needs.setup-creative-project.outputs.branch-name }}
          oauth-token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mcp-config: ${{ secrets.MCP_CONFIG }}
      
      - name: Validate Video Integration
        run: |
          echo "üé¨ Video generation completed using v3 module output"
          echo "  Source image: ${{ needs.generate-creative-images.outputs.google-image-url }}"
          echo "  Video URL: ${{ steps.video.outputs.video-url }}"
          
          if [ -n "${{ steps.video.outputs.video-url }}" ]; then
            echo "‚úÖ Successful parameter flow: v3 ‚Üí video-generation"
          else
            echo "::warning::‚ö†Ô∏è Video generation may have encountered issues"
          fi

  # Create Three.js experience (conditional)
  create-3d-experience:
    if: github.event.inputs.create-3d-experience == 'true'
    needs: [setup-creative-project, generate-creative-images, analyze-primary-image]
    runs-on: ubuntu-latest
    outputs:
      threejs-url: ${{ steps.threejs.outputs.experience-url }}
    steps:
      - name: Generate Three.js Experience
        id: threejs
        uses: ./.github/actions/kamui-modules/threejs-integration
        with:
          folder-name: ${{ needs.setup-creative-project.outputs.folder-name }}
          scene-type: ${{ needs.analyze-primary-image.outputs.scene-type }}
          atmosphere: ${{ needs.analyze-primary-image.outputs.atmosphere }}
          branch-name: ${{ needs.setup-creative-project.outputs.branch-name }}
          oauth-token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mcp-config: ${{ secrets.MCP_CONFIG }}
      
      - name: Validate Three.js Integration
        run: |
          echo "üåê Three.js experience created using v3 generated images"
          echo "  Folder: ${{ needs.setup-creative-project.outputs.folder-name }}"
          echo "  Scene type: ${{ needs.analyze-primary-image.outputs.scene-type }}"
          echo "  Experience URL: ${{ steps.threejs.outputs.experience-url }}"
          
          # This module uses the folder structure created by v3, demonstrating file-based integration
          echo "‚úÖ Successful integration: v3 ‚Üí threejs-integration (via folder structure)"

  # Enhanced web player with multi-image support
  create-enhanced-web-player:
    needs: [setup-creative-project, generate-creative-images]
    runs-on: ubuntu-latest
    outputs:
      player-url: ${{ steps.player.outputs.player-url }}
    steps:
      - name: Generate Enhanced Web Player
        id: player
        uses: ./.github/actions/kamui-modules/web-player-generation
        with:
          folder-name: ${{ needs.setup-creative-project.outputs.folder-name }}
          # Enhanced integration using v3 outputs
          image-count: ${{ needs.generate-creative-images.outputs.images-completed }}
          branch-name: ${{ needs.setup-creative-project.outputs.branch-name }}
          oauth-token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mcp-config: ${{ secrets.MCP_CONFIG }}
      
      - name: Validate Enhanced Web Player
        run: |
          echo "üì± Enhanced web player created with v3 multi-image support"
          echo "  Folder: ${{ needs.setup-creative-project.outputs.folder-name }}"
          echo "  Image count: ${{ needs.generate-creative-images.outputs.images-completed }}"
          echo "  Player URL: ${{ steps.player.outputs.player-url }}"
          
          # This demonstrates enhanced integration using new v3 outputs
          if [ "${{ needs.generate-creative-images.outputs.images-completed }}" -gt "1" ]; then
            echo "‚úÖ Multi-image gallery support enabled via v3 enhanced outputs"
          else
            echo "‚úÖ Single image display via v3 compatible outputs"
          fi

  # Pipeline completion summary
  pipeline-completion-summary:
    if: always()
    needs: [
      validate-pipeline-inputs,
      setup-creative-project,
      generate-creative-images,
      analyze-primary-image,
      create-video-content,
      create-3d-experience,
      create-enhanced-web-player
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Generate Pipeline Summary
        run: |
          echo "# üé® Complete Creative Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìã Pipeline Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Prompt**: ${{ github.event.inputs.image-prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Count**: ${{ github.event.inputs.image-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Models**: ${{ github.event.inputs.models }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Comparison Enabled**: ${{ github.event.inputs.enable-comparison }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Video Creation**: ${{ github.event.inputs.create-video }}" >> $GITHUB_STEP_SUMMARY
          echo "- **3D Experience**: ${{ github.event.inputs.create-3d-experience }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Output |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Input validation
          if [ "${{ needs.validate-pipeline-inputs.result }}" = "success" ]; then
            echo "| Input Validation | ‚úÖ Success | Parameters validated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Input Validation | ‚ùå Failed | Parameter validation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Project setup
          if [ "${{ needs.setup-creative-project.result }}" = "success" ]; then
            echo "| Project Setup | ‚úÖ Success | Folder: ${{ needs.setup-creative-project.outputs.folder-name }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Project Setup | ‚ùå Failed | Setup failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Image generation
          if [ "${{ needs.generate-creative-images.result }}" = "success" ]; then
            COMPLETED="${{ needs.generate-creative-images.outputs.images-completed }}"
            EXPECTED="${{ needs.validate-pipeline-inputs.outputs.total-expected-images }}"
            SUCCESS_RATE=$(( (COMPLETED * 100) / EXPECTED ))
            echo "| Image Generation v3 | ‚úÖ Success | $COMPLETED/$EXPECTED images (${SUCCESS_RATE}%) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Image Generation v3 | ‚ùå Failed | Generation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Image analysis
          if [ "${{ needs.analyze-primary-image.result }}" = "success" ]; then
            echo "| Image Analysis | ‚úÖ Success | Scene: ${{ needs.analyze-primary-image.outputs.scene-type }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Image Analysis | ‚ùå Failed | Analysis failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Video creation
          if [ "${{ needs.create-video-content.result }}" = "success" ]; then
            echo "| Video Creation | ‚úÖ Success | Video generated |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-video-content.result }}" = "skipped" ]; then
            echo "| Video Creation | ‚è≠Ô∏è Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Video Creation | ‚ùå Failed | Video generation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 3D experience
          if [ "${{ needs.create-3d-experience.result }}" = "success" ]; then
            echo "| 3D Experience | ‚úÖ Success | Three.js experience created |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-3d-experience.result }}" = "skipped" ]; then
            echo "| 3D Experience | ‚è≠Ô∏è Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 3D Experience | ‚ùå Failed | 3D generation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Web player
          if [ "${{ needs.create-enhanced-web-player.result }}" = "success" ]; then
            echo "| Enhanced Web Player | ‚úÖ Success | Multi-image player created |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Enhanced Web Player | ‚ùå Failed | Player generation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Parameter Flow Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **v3 ‚Üí image-world-analysis**: `google-image-url` parameter flow validated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **v3 ‚Üí video-generation**: `google-image-url` parameter flow validated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **v3 ‚Üí threejs-integration**: Folder structure integration validated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **v3 ‚Üí web-player-generation**: Enhanced `image-count` parameter flow validated" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üöÄ v3 Module Enhancements Demonstrated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Enhanced Error Handling**: Robust retry mechanisms" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Advanced Validation**: Comprehensive parameter validation" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Progress Tracking**: Real-time generation monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Rich Reporting**: Enhanced comparison reports available" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ 100% Backward Compatibility**: All existing integrations work perfectly" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Enhanced Outputs**: New outputs enable advanced features" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.generate-creative-images.outputs.comparison-report }}" != "" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìä **Enhanced Comparison Report**: ${{ needs.generate-creative-images.outputs.comparison-report }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*üé® Complete Creative Pipeline powered by Multi Image Generation v3*" >> $GITHUB_STEP_SUMMARY