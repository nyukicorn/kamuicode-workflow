name: 'Three.js Pointcloud Viewer'
description: 'Generate interactive Three.js viewer for PLY point clouds with GaussianSplats3D'
author: 'KamuiCode Workflow'

inputs:
  ply-file-path:
    description: 'Path to the PLY point cloud file'
    required: true
  output-folder:
    description: 'Output folder for the viewer HTML and assets'
    required: true
  viewer-title:
    description: 'Title for the viewer page'
    required: false
    default: '3D Point Cloud Viewer'
  camera-position:
    description: 'Initial camera position (x,y,z format e.g., "0,0,100")'
    required: false
    default: '0,0,100'
  auto-rotate:
    description: 'Enable automatic rotation (deprecated - use double-click)'
    required: false
    default: 'false'
  background-color:
    description: 'Background color (hex format e.g., "#000000")'
    required: false
    default: '#1a1a1a'
  point-size:
    description: 'Point cloud render size multiplier'
    required: false
    default: '1.0'
  animation-speed:
    description: 'Animation speed multiplier'
    required: false
    default: '1.0'
  music-file:
    description: 'Path to background music file (optional)'
    required: false
    default: ''
  branch-name:
    description: 'The branch to work on'
    required: true

outputs:
  viewer-completed:
    description: 'Whether viewer generation was completed successfully'
    value: ${{ steps.generate.outputs.completed }}
  viewer-path:
    description: 'Path to the generated viewer HTML file'
    value: ${{ steps.generate.outputs.viewer-path }}
  assets-count:
    description: 'Number of asset files created'
    value: ${{ steps.generate.outputs.assets-count }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Generate Three.js Pointcloud Viewer
      id: generate
      shell: bash
      run: |
        echo "::group::🎮 Three.js Pointcloud Viewer Generation"
        echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
        
        # 設定
        PLY_FILE="${{ inputs.ply-file-path }}"
        OUTPUT_FOLDER="${{ inputs.output-folder }}"
        VIEWER_TITLE="${{ inputs.viewer-title }}"
        CAMERA_POS="${{ inputs.camera-position }}"
        AUTO_ROTATE="${{ inputs.auto-rotate }}"
        BG_COLOR="${{ inputs.background-color }}"
        POINT_SIZE="${{ inputs.point-size }}"
        ANIMATION_SPEED="${{ inputs.animation-speed }}"
        MUSIC_FILE="${{ inputs.music-file }}"
        
        echo "PLY file: $PLY_FILE"
        echo "Output folder: $OUTPUT_FOLDER"
        echo "Viewer title: $VIEWER_TITLE"
        echo "Camera position: $CAMERA_POS"
        echo "Auto rotate: $AUTO_ROTATE"
        echo "Background: $BG_COLOR"
        echo "Point size: $POINT_SIZE"
        echo "Animation speed: $ANIMATION_SPEED"
        echo "Music file: $MUSIC_FILE"
        
        # PLYファイルの存在確認
        if [ ! -f "$PLY_FILE" ]; then
          echo "::error::❌ PLY file not found: $PLY_FILE"
          exit 1
        fi
        
        # 出力フォルダの作成
        mkdir -p "$OUTPUT_FOLDER"
        mkdir -p "$OUTPUT_FOLDER/assets"
        
        # PLYファイルを出力フォルダにコピー
        PLY_FILENAME=$(basename "$PLY_FILE")
        cp "$PLY_FILE" "$OUTPUT_FOLDER/assets/$PLY_FILENAME"
        echo "✅ PLY file copied to viewer assets"
        
        # 音楽ファイルがある場合は処理
        MUSIC_AVAILABLE="false"
        if [ -n "$MUSIC_FILE" ] && [ -f "$MUSIC_FILE" ]; then
          MUSIC_FILENAME=$(basename "$MUSIC_FILE")
          cp "$MUSIC_FILE" "$OUTPUT_FOLDER/assets/$MUSIC_FILENAME"  
          MUSIC_AVAILABLE="true"
          echo "✅ Music file copied to viewer assets: $MUSIC_FILENAME"
        else
          echo "ℹ️  No music file provided or file not found"
        fi
        
        # カメラ位置をパース
        IFS=',' read -ra CAM_ARRAY <<< "$CAMERA_POS"
        CAM_X=${CAM_ARRAY[0]:-0}
        CAM_Y=${CAM_ARRAY[1]:-0}
        CAM_Z=${CAM_ARRAY[2]:-100}
        
        # テンプレートファイルをコピーして生成
        SCRIPT_DIR="${GITHUB_ACTION_PATH}"
        cp "$SCRIPT_DIR/viewer-template.html" "$OUTPUT_FOLDER/index.html"
        cp "$SCRIPT_DIR/viewer-script.js" "$OUTPUT_FOLDER/viewer-script.js"
        
        # HTMLファイル内のプレースホルダーを置換
        sed -i.bak "s/VIEWER_TITLE_PLACEHOLDER/$VIEWER_TITLE/g" "$OUTPUT_FOLDER/index.html"
        sed -i.bak "s/BACKGROUND_COLOR_PLACEHOLDER/$BG_COLOR/g" "$OUTPUT_FOLDER/index.html"
        sed -i.bak "s/POINT_SIZE_PLACEHOLDER/$POINT_SIZE/g" "$OUTPUT_FOLDER/index.html"
        sed -i.bak "s/ANIMATION_SPEED_PLACEHOLDER/$ANIMATION_SPEED/g" "$OUTPUT_FOLDER/index.html"
        
        # JavaScriptファイル内のプレースホルダーを置換
        sed -i.bak "s/POINT_SIZE_PLACEHOLDER/$POINT_SIZE/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/ANIMATION_SPEED_PLACEHOLDER/$ANIMATION_SPEED/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/AUTO_ROTATE_PLACEHOLDER/$AUTO_ROTATE/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/CAM_X_PLACEHOLDER/$CAM_X/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/CAM_Y_PLACEHOLDER/$CAM_Y/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/CAM_Z_PLACEHOLDER/$CAM_Z/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/PLY_FILENAME_PLACEHOLDER/$PLY_FILENAME/g" "$OUTPUT_FOLDER/viewer-script.js"
        sed -i.bak "s/BACKGROUND_COLOR_PLACEHOLDER/$BG_COLOR/g" "$OUTPUT_FOLDER/viewer-script.js"
        
        # 音楽機能の処理
        if [ "$MUSIC_AVAILABLE" = "true" ]; then
          # 音楽ボタンを追加（一時ファイルを使用）
          cat > /tmp/music_button.html << 'EOF'
                    <div class="control-item">
                        <button id="musicToggle" class="music-button">🎵 Play Music</button>
                    </div>
        EOF
          sed -i.bak "/MUSIC_BUTTON_PLACEHOLDER/r /tmp/music_button.html" "$OUTPUT_FOLDER/index.html"
          sed -i.bak "/MUSIC_BUTTON_PLACEHOLDER/d" "$OUTPUT_FOLDER/index.html"
          rm -f /tmp/music_button.html
          
          # 音楽初期化処理を追加
          MUSIC_INIT="setupMusic();"
          sed -i.bak "s/MUSIC_INIT_PLACEHOLDER/$MUSIC_INIT/g" "$OUTPUT_FOLDER/viewer-script.js"
          
          # Three.jsワークフローの実績ある音楽実装を適用
          echo "function setupMusic() {" > /tmp/music_functions.js
          echo "    const playButton = document.getElementById('musicToggle');" >> /tmp/music_functions.js
          echo "    let audio = null;" >> /tmp/music_functions.js
          echo "    " >> /tmp/music_functions.js
          echo "    playButton.addEventListener('click', () => {" >> /tmp/music_functions.js
          echo "        if (!audio) {" >> /tmp/music_functions.js
          echo "            audio = new Audio('assets/$MUSIC_FILENAME');" >> /tmp/music_functions.js
          echo "            audio.loop = true;" >> /tmp/music_functions.js
          echo "            audio.volume = 0.7;" >> /tmp/music_functions.js
          echo "        }" >> /tmp/music_functions.js
          echo "        " >> /tmp/music_functions.js
          echo "        if (audio.paused) {" >> /tmp/music_functions.js
          echo "            audio.play().then(() => {" >> /tmp/music_functions.js
          echo "                playButton.textContent = '🔇 Stop Music';" >> /tmp/music_functions.js
          echo "                playButton.classList.add('playing');" >> /tmp/music_functions.js
          echo "            }).catch(error => {" >> /tmp/music_functions.js
          echo "                console.log('Music file not found:', error);" >> /tmp/music_functions.js
          echo "                playButton.textContent = '❌ No Music File';" >> /tmp/music_functions.js
          echo "            });" >> /tmp/music_functions.js
          echo "        } else {" >> /tmp/music_functions.js
          echo "            audio.pause();" >> /tmp/music_functions.js
          echo "            playButton.textContent = '🎵 Play Music';" >> /tmp/music_functions.js
          echo "            playButton.classList.remove('playing');" >> /tmp/music_functions.js
          echo "        }" >> /tmp/music_functions.js
          echo "    });" >> /tmp/music_functions.js
          echo "}" >> /tmp/music_functions.js
          
          # プレースホルダーを置換
          sed -i.bak "/MUSIC_FUNCTIONS_PLACEHOLDER/r /tmp/music_functions.js" "$OUTPUT_FOLDER/viewer-script.js"
          sed -i.bak "/MUSIC_FUNCTIONS_PLACEHOLDER/d" "$OUTPUT_FOLDER/viewer-script.js"
          rm -f /tmp/music_functions.js
          
          # 音楽関数はsetupMusic()でイベントリスナー登録するため、window設定不要
          sed -i.bak "s/MUSIC_WINDOW_PLACEHOLDER//g" "$OUTPUT_FOLDER/viewer-script.js"
        else
          # 音楽機能なしの場合はプレースホルダーを削除
          sed -i.bak "s/MUSIC_BUTTON_PLACEHOLDER//g" "$OUTPUT_FOLDER/index.html"
          sed -i.bak "s/MUSIC_INIT_PLACEHOLDER//g" "$OUTPUT_FOLDER/viewer-script.js"
          sed -i.bak "s/MUSIC_FUNCTIONS_PLACEHOLDER//g" "$OUTPUT_FOLDER/viewer-script.js"
          sed -i.bak "s/MUSIC_WINDOW_PLACEHOLDER//g" "$OUTPUT_FOLDER/viewer-script.js"
        fi
        
        # バックアップファイルを削除
        rm -f "$OUTPUT_FOLDER/index.html.bak"
        rm -f "$OUTPUT_FOLDER/viewer-script.js.bak"
        
        # 生成されたファイルの確認
        VIEWER_PATH="$OUTPUT_FOLDER/index.html"
        ASSETS_COUNT=$(find "$OUTPUT_FOLDER/assets" -type f | wc -l)
        
        echo "📊 Viewer Generation Summary:"
        echo "   - Viewer HTML: $VIEWER_PATH"
        echo "   - Assets: $ASSETS_COUNT files"
        echo "   - PLY file: $PLY_FILENAME"
        
        # Set outputs
        echo "completed=true" >> $GITHUB_OUTPUT
        echo "viewer-path=$VIEWER_PATH" >> $GITHUB_OUTPUT
        echo "assets-count=$ASSETS_COUNT" >> $GITHUB_OUTPUT
        
        echo "✅ Three.js Pointcloud Viewer generated successfully"
        echo "::endgroup::"
    
    - name: Commit generated viewer
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.output-folder }}/
        if git diff --cached --quiet; then
          echo "No viewer files to commit"
        else
          git commit -m "Add Three.js pointcloud viewer: ${{ inputs.viewer-title }}"
          git push origin ${{ inputs.branch-name }}
        fi