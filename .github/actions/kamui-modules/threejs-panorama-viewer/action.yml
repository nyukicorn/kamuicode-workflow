name: '360¬∞ Panorama Viewer'
description: 'Creates a 360-degree panoramic particle viewer using Three.js with shared components and depth information'
inputs:
  input_image:
    description: 'Input image file for panoramic display (deprecated - use ply_file_path for depth-enhanced panoramas)'
    required: false
    default: ''
  
  ply_file_path:
    description: 'PLY file path from pointcloud-panorama-generation module (recommended)'
    required: false
    default: ''
  
  enable_depth_visualization:
    description: 'Enable depth-based color enhancement'
    required: false
    default: 'true'
  output_filename:
    description: 'Output filename for the panorama viewer'
    required: false
    default: 'panorama-viewer.html'
  background_color:
    description: 'Background color for the panorama viewer (hex format)'
    required: false
    default: '#000814'
  camera_position_radius:
    description: 'Initial camera position radius from center'
    required: false
    default: '100'
  particle_density:
    description: 'Particle density for panoramic display (low/medium/high)'
    required: false
    default: 'medium'
  auto_rotate:
    description: 'Enable auto-rotation'
    required: false
    default: 'true'
  rotation_speed:
    description: 'Auto-rotation speed'
    required: false
    default: '1.0'
  enable_music:
    description: 'Enable music integration'
    required: false
    default: 'false'
  music_file:
    description: 'Music file for audio-reactive effects'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Setup panorama viewer environment
      shell: bash
      run: |
        echo "üåê Setting up 360¬∞ Panorama Viewer environment..."
        echo "Input image: ${{ inputs.input_image }}"
        echo "PLY file: ${{ inputs.ply_file_path }}"
        echo "Output filename: ${{ inputs.output_filename }}"
        echo "Background color: ${{ inputs.background_color }}"
        echo "Particle density: ${{ inputs.particle_density }}"
        echo "Depth visualization: ${{ inputs.enable_depth_visualization }}"
        
    - name: Process input for panoramic display
      shell: bash
      run: |
        echo "üñºÔ∏è Processing input for panoramic display..."
        # Create assets directory
        mkdir -p assets
        
        # Check which input type is provided
        if [ -n "${{ inputs.ply_file_path }}" ] && [ -f "${{ inputs.ply_file_path }}" ]; then
          echo "‚úÖ Using PLY file with depth information: ${{ inputs.ply_file_path }}"
          echo "PLY_MODE=true" >> $GITHUB_ENV
          # Copy PLY file to assets
          cp "${{ inputs.ply_file_path }}" assets/panorama.ply
          # Try to find corresponding image
          PLY_PATH="${{ inputs.ply_file_path }}"
          IMAGE_PATH="${PLY_PATH%.ply}.jpg"
          if [ -f "$IMAGE_PATH" ]; then
            cp "$IMAGE_PATH" assets/panorama-image.jpg
            echo "‚úÖ Found corresponding image: $IMAGE_PATH"
          fi
        elif [ -n "${{ inputs.input_image }}" ] && [ -f "${{ inputs.input_image }}" ]; then
          echo "‚ö†Ô∏è  Using image-only mode (no depth information)"
          echo "PLY_MODE=false" >> $GITHUB_ENV
          cp "${{ inputs.input_image }}" assets/panorama-image.jpg
          echo "‚úÖ Image copied to assets/panorama-image.jpg"
        else
          echo "‚ùå No valid input provided. Please specify either ply_file_path or input_image"
          exit 1
        fi
        
    - name: Create panorama viewer from template
      shell: bash
      run: |
        echo "üé® Creating panorama viewer from template..."
        
        # Copy template and replace placeholders
        cp ${{ github.action_path }}/panorama-template.html ${{ inputs.output_filename }}
        
        # Replace placeholders in the HTML file
        sed -i '' "s/BACKGROUND_COLOR_PLACEHOLDER/${{ inputs.background_color }}/g" ${{ inputs.output_filename }}
        sed -i '' "s/CAM_RADIUS_PLACEHOLDER/${{ inputs.camera_position_radius }}/g" ${{ inputs.output_filename }}
        sed -i '' "s/PARTICLE_DENSITY_PLACEHOLDER/${{ inputs.particle_density }}/g" ${{ inputs.output_filename }}
        sed -i '' "s/AUTO_ROTATE_PLACEHOLDER/${{ inputs.auto_rotate }}/g" ${{ inputs.output_filename }}
        sed -i '' "s/ROTATION_SPEED_PLACEHOLDER/${{ inputs.rotation_speed }}/g" ${{ inputs.output_filename }}
        sed -i '' "s/ENABLE_DEPTH_PLACEHOLDER/${{ inputs.enable_depth_visualization }}/g" ${{ inputs.output_filename }}
        
        # Set PLY file path if available
        if [ "$PLY_MODE" = "true" ]; then
          sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER|assets/panorama.ply|g" ${{ inputs.output_filename }}
        else
          sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER||g" ${{ inputs.output_filename }}
        fi
        
        # Handle music integration
        if [ "${{ inputs.enable_music }}" = "true" ] && [ -n "${{ inputs.music_file }}" ]; then
          echo "üéµ Enabling music integration..."
          sed -i '' "s/MUSIC_INIT_PLACEHOLDER/setupMusic();/g" ${{ inputs.output_filename }}
          sed -i '' "s/MUSIC_FILE_PLACEHOLDER/${{ inputs.music_file }}/g" ${{ inputs.output_filename }}
          # Add music functions placeholder
          MUSIC_FUNCTIONS='function setupMusic() { console.log("üéµ Music system initialized for panorama viewer"); }'
          sed -i '' "s/MUSIC_FUNCTIONS_PLACEHOLDER/$MUSIC_FUNCTIONS/g" ${{ inputs.output_filename }}
          sed -i '' "s/MUSIC_WINDOW_PLACEHOLDER/window.setupMusic = setupMusic;/g" ${{ inputs.output_filename }}
        else
          echo "üîá Music integration disabled"
          sed -i '' "s/MUSIC_INIT_PLACEHOLDER//g" ${{ inputs.output_filename }}
          sed -i '' "s/MUSIC_FUNCTIONS_PLACEHOLDER//g" ${{ inputs.output_filename }}
          sed -i '' "s/MUSIC_WINDOW_PLACEHOLDER//g" ${{ inputs.output_filename }}
        fi
        
        # Copy panorama script
        cp ${{ github.action_path }}/panorama-script.js panorama-script.js
        
        echo "‚úÖ Panorama viewer created: ${{ inputs.output_filename }}"
        
    - name: Validate panorama viewer
      shell: bash
      run: |
        echo "‚úÖ Validating panorama viewer..."
        
        # Check if files exist
        if [ ! -f "${{ inputs.output_filename }}" ]; then
          echo "‚ùå Output file not found"
          exit 1
        fi
        
        if [ ! -f "panorama-script.js" ]; then
          echo "‚ùå Panorama script not found"
          exit 1
        fi
        
        if [ "$PLY_MODE" = "true" ]; then
          if [ ! -f "assets/panorama.ply" ]; then
            echo "‚ùå Panorama PLY not found"
            exit 1
          fi
          echo "‚úÖ PLY file: assets/panorama.ply"
        else
          if [ ! -f "assets/panorama-image.jpg" ]; then
            echo "‚ùå Panorama image not found"
            exit 1
          fi
          echo "‚úÖ Image file: assets/panorama-image.jpg"
        fi
        
        echo "üåü 360¬∞ Panorama Viewer created successfully!"
        echo "üìÑ Output file: ${{ inputs.output_filename }}"
        echo "üìú Script file: panorama-script.js"
        echo "üéØ Mode: $([ "$PLY_MODE" = "true" ] && echo "Depth-enhanced PLY" || echo "Image-only")"