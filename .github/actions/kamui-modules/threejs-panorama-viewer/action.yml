name: 'Immersive 360¬∞ Panorama Pointcloud Viewer'
description: 'Creates an immersive 360-degree panoramic pointcloud experience using Three.js with depth estimation and particle systems'
inputs:
  input_image:
    description: 'Input panorama image file for pointcloud conversion'
    required: false
    default: ''
  
  ply_file_path:
    description: 'Pre-generated PLY file path (optional, will generate from input_image if not provided)'
    required: false
    default: ''
  
  enable_pointcloud_mode:
    description: 'Enable pointcloud particle system (true/false)'
    required: false
    default: 'true'
  
  depth_model:
    description: 'Depth estimation model (midas_v21/midas_v21_small)'
    required: false
    default: 'midas_v21_small'
  
  color_mode:
    description: 'Pointcloud color mode (color/monochrome/sepia)'
    required: false
    default: 'color'
  output_filename:
    description: 'Output filename for the panorama viewer'
    required: false
    default: 'panorama-viewer.html'
  background_color:
    description: 'Background color for the panorama viewer (hex format)'
    required: false
    default: '#000814'
  camera_position_radius:
    description: 'Initial camera position radius from center'
    required: false
    default: '100'
  particle_density:
    description: 'Particle density for panoramic display (low/medium/high)'
    required: false
    default: 'medium'
  auto_rotate:
    description: 'Enable auto-rotation'
    required: false
    default: 'true'
  rotation_speed:
    description: 'Auto-rotation speed'
    required: false
    default: '1.0'
  enable_music:
    description: 'Enable music integration'
    required: false
    default: 'false'
  music_file:
    description: 'Music file for audio-reactive effects'
    required: false
  
  output_folder:
    description: 'Output folder for the viewer HTML and assets'
    required: true
  
  branch_name:
    description: 'Git branch name for commits'
    required: false
    default: 'main'

runs:
  using: 'composite'
  steps:
    - name: Setup immersive panorama environment
      shell: bash
      run: |
        echo "üåê Setting up Immersive 360¬∞ Panorama Pointcloud Viewer..."
        echo "Input image: ${{ inputs.input_image }}"
        echo "PLY file: ${{ inputs.ply_file_path }}"
        echo "Pointcloud mode: ${{ inputs.enable_pointcloud_mode }}"
        echo "Depth model: ${{ inputs.depth_model }}"
        echo "Color mode: ${{ inputs.color_mode }}"
        echo "Output folder: ${{ inputs.output_folder }}"
        echo "Particle density: ${{ inputs.particle_density }}"
        
    - name: Setup Python environment for pointcloud generation
      uses: actions/setup-python@v4
      if: inputs.enable_pointcloud_mode == 'true'
      with:
        python-version: '3.10'
    
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies for pointcloud processing
      shell: bash
      if: inputs.enable_pointcloud_mode == 'true'
      run: |
        echo "üì¶ Installing pointcloud dependencies..."
        # Install Python dependencies
        if [ -f "tools/requirements.txt" ]; then
          pip install -r tools/requirements.txt
        else
          pip install torch torchvision opencv-python pillow numpy
        fi
        # Install Node.js dependencies  
        npm install
    
    - name: Process input and generate pointcloud
      shell: bash
      run: |
        echo "üñºÔ∏è Processing input for immersive panoramic display..."
        # Create output directory structure
        mkdir -p "${{ inputs.output_folder }}"
        mkdir -p "${{ inputs.output_folder }}/assets"
        
        # Determine input source and generate pointcloud if needed
        if [ -n "${{ inputs.ply_file_path }}" ] && [ -f "${{ inputs.ply_file_path }}" ]; then
          echo "‚úÖ Using pre-generated PLY file: ${{ inputs.ply_file_path }}"
          cp "${{ inputs.ply_file_path }}" "${{ inputs.output_folder }}/assets/panorama.ply"
          echo "POINTCLOUD_READY=true" >> $GITHUB_ENV
          
          # Find corresponding image
          PLY_PATH="${{ inputs.ply_file_path }}"
          IMAGE_PATH="${PLY_PATH%.ply}.png"
          if [ ! -f "$IMAGE_PATH" ]; then
            IMAGE_PATH="${PLY_PATH%.ply}.jpg"
          fi
          if [ -f "$IMAGE_PATH" ]; then
            cp "$IMAGE_PATH" "${{ inputs.output_folder }}/assets/panorama-image.jpg"
            echo "‚úÖ Found corresponding image: $IMAGE_PATH"
          fi
          
        elif [ -n "${{ inputs.input_image }}" ] && [ -f "${{ inputs.input_image }}" ]; then
          echo "üéØ Generating pointcloud from panorama image: ${{ inputs.input_image }}"
          
          # Copy original image to assets
          cp "${{ inputs.input_image }}" "${{ inputs.output_folder }}/assets/panorama-image.jpg"
          
          if [ "${{ inputs.enable_pointcloud_mode }}" = "true" ]; then
            echo "üß† Running depth estimation for panorama..."
            DEPTH_MAP_PATH="${{ inputs.output_folder }}/assets/depth.png"
            
            # Generate depth map using simple_depth_test.py
            if ! python tools/simple_depth_test.py \
              --input "${{ inputs.input_image }}" \
              --output "$DEPTH_MAP_PATH"; then
              echo "‚ö†Ô∏è Depth estimation failed, falling back to image-only mode"
              echo "POINTCLOUD_READY=false" >> $GITHUB_ENV
            else
              echo "üîÑ Converting depth map to PLY pointcloud..."
              PLY_FILE_PATH="${{ inputs.output_folder }}/assets/panorama.ply"
              
              # Convert depth to PLY
              if ! node tools/depth2ply.js \
                --input "$DEPTH_MAP_PATH" \
                --output "$PLY_FILE_PATH" \
                --original-image "${{ inputs.input_image }}" \
                --color-mode "${{ inputs.color_mode }}"; then
                echo "‚ö†Ô∏è PLY conversion failed, falling back to image-only mode"
                echo "POINTCLOUD_READY=false" >> $GITHUB_ENV
              else
                echo "‚úÖ Panorama pointcloud generated successfully"
                echo "POINTCLOUD_READY=true" >> $GITHUB_ENV
              fi
            fi
          else
            echo "üìã Pointcloud mode disabled, using image-only panorama"
            echo "POINTCLOUD_READY=false" >> $GITHUB_ENV
          fi
        else
          echo "‚ùå No valid input provided. Please specify either ply_file_path or input_image"
          exit 1
        fi
        
    - name: Create immersive panorama viewer
      shell: bash
      run: |
        echo "üé® Creating immersive panorama viewer..."
        
        # Copy template and script files to output folder
        cp ${{ github.action_path }}/panorama-template.html "${{ inputs.output_folder }}/${{ inputs.output_filename }}"
        cp ${{ github.action_path }}/panorama-script.js "${{ inputs.output_folder }}/panorama-script.js"
        
        # Copy shared viewer components
        SHARED_DIR="./.github/actions/kamui-modules/shared-viewer-components"
        mkdir -p "${{ inputs.output_folder }}/shared-components"
        if [ -d "$SHARED_DIR" ]; then
          cp "$SHARED_DIR/audio-reactive-system.js" "${{ inputs.output_folder }}/shared-components/" 2>/dev/null || echo "‚ö†Ô∏è audio-reactive-system.js not found"
          cp "$SHARED_DIR/camera-controls.js" "${{ inputs.output_folder }}/shared-components/" 2>/dev/null || echo "‚ö†Ô∏è camera-controls.js not found"
          cp "$SHARED_DIR/mouse-interaction.js" "${{ inputs.output_folder }}/shared-components/" 2>/dev/null || echo "‚ö†Ô∏è mouse-interaction.js not found"
          cp "$SHARED_DIR/ui-controls.js" "${{ inputs.output_folder }}/shared-components/" 2>/dev/null || echo "‚ö†Ô∏è ui-controls.js not found"
          cp "$SHARED_DIR/particle-effects.js" "${{ inputs.output_folder }}/shared-components/" 2>/dev/null || echo "‚ö†Ô∏è particle-effects.js not found"
        fi
        
        # Replace placeholders in HTML file and JS file (cross-platform sed)
        HTML_FILE="${{ inputs.output_folder }}/${{ inputs.output_filename }}"
        JS_FILE="${{ inputs.output_folder }}/panorama-script.js"
        if [[ "$OSTYPE" == "darwin"* ]]; then
          # macOS sed syntax - HTML file
          sed -i '' "s/BACKGROUND_COLOR_PLACEHOLDER/${{ inputs.background_color }}/g" "$HTML_FILE"
          sed -i '' "s/CAM_RADIUS_PLACEHOLDER/${{ inputs.camera_position_radius }}/g" "$HTML_FILE"
          sed -i '' "s/PARTICLE_DENSITY_PLACEHOLDER/${{ inputs.particle_density }}/g" "$HTML_FILE"
          sed -i '' "s/POINTCLOUD_MODE_PLACEHOLDER/${{ inputs.enable_pointcloud_mode }}/g" "$HTML_FILE"
          sed -i '' "s/COLOR_MODE_PLACEHOLDER/${{ inputs.color_mode }}/g" "$HTML_FILE"
          # macOS sed syntax - JS file
          sed -i '' "s/BACKGROUND_COLOR_PLACEHOLDER/${{ inputs.background_color }}/g" "$JS_FILE"
          sed -i '' "s/CAM_RADIUS_PLACEHOLDER/${{ inputs.camera_position_radius }}/g" "$JS_FILE"
          sed -i '' "s/AUTO_ROTATE_PLACEHOLDER/${{ inputs.auto_rotate }}/g" "$JS_FILE"
          sed -i '' "s/ROTATION_SPEED_PLACEHOLDER/${{ inputs.rotation_speed }}/g" "$JS_FILE"
          sed -i '' "s/ENABLE_DEPTH_PLACEHOLDER/true/g" "$JS_FILE"
        else
          # Linux sed syntax - HTML file
          sed -i "s/BACKGROUND_COLOR_PLACEHOLDER/${{ inputs.background_color }}/g" "$HTML_FILE"
          sed -i "s/CAM_RADIUS_PLACEHOLDER/${{ inputs.camera_position_radius }}/g" "$HTML_FILE"
          sed -i "s/PARTICLE_DENSITY_PLACEHOLDER/${{ inputs.particle_density }}/g" "$HTML_FILE"
          sed -i "s/POINTCLOUD_MODE_PLACEHOLDER/${{ inputs.enable_pointcloud_mode }}/g" "$HTML_FILE"
          sed -i "s/COLOR_MODE_PLACEHOLDER/${{ inputs.color_mode }}/g" "$HTML_FILE"
          # Linux sed syntax - JS file
          sed -i "s/BACKGROUND_COLOR_PLACEHOLDER/${{ inputs.background_color }}/g" "$JS_FILE"
          sed -i "s/CAM_RADIUS_PLACEHOLDER/${{ inputs.camera_position_radius }}/g" "$JS_FILE"
          sed -i "s/AUTO_ROTATE_PLACEHOLDER/${{ inputs.auto_rotate }}/g" "$JS_FILE"
          sed -i "s/ROTATION_SPEED_PLACEHOLDER/${{ inputs.rotation_speed }}/g" "$JS_FILE"
          sed -i "s/ENABLE_DEPTH_PLACEHOLDER/true/g" "$JS_FILE"
        fi
        
        # Set PLY file path based on pointcloud readiness
        if [[ "$OSTYPE" == "darwin"* ]]; then
          if [ "$POINTCLOUD_READY" = "true" ]; then
            sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER|assets/panorama.ply|g" "$HTML_FILE"
            sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER|assets/panorama.ply|g" "$JS_FILE"
            echo "‚úÖ Pointcloud mode enabled with PLY file"
          else
            sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER||g" "$HTML_FILE"
            sed -i '' "s|PLY_FILE_PATH_PLACEHOLDER||g" "$JS_FILE"
            echo "üìã Image-only mode (no pointcloud)"
          fi
        else
          if [ "$POINTCLOUD_READY" = "true" ]; then
            sed -i "s|PLY_FILE_PATH_PLACEHOLDER|assets/panorama.ply|g" "$HTML_FILE"
            sed -i "s|PLY_FILE_PATH_PLACEHOLDER|assets/panorama.ply|g" "$JS_FILE"
            echo "‚úÖ Pointcloud mode enabled with PLY file"
          else
            sed -i "s|PLY_FILE_PATH_PLACEHOLDER||g" "$HTML_FILE"
            sed -i "s|PLY_FILE_PATH_PLACEHOLDER||g" "$JS_FILE"
            echo "üìã Image-only mode (no pointcloud)"
          fi
        fi
        
        # Handle music integration
        if [ "${{ inputs.enable_music }}" = "true" ] && [ -n "${{ inputs.music_file }}" ]; then
          echo "üéµ Enabling music integration..."
          # Copy music file to assets
          cp "${{ inputs.music_file }}" "${{ inputs.output_folder }}/assets/" 2>/dev/null || echo "‚ö†Ô∏è Music file copy failed"
          MUSIC_FILENAME=$(basename "${{ inputs.music_file }}")
          
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/MUSIC_INIT_PLACEHOLDER/setupMusic();/g" "$HTML_FILE"
            sed -i '' "s/MUSIC_FILE_PLACEHOLDER/assets\/$MUSIC_FILENAME/g" "$HTML_FILE"
          else
            sed -i "s/MUSIC_INIT_PLACEHOLDER/setupMusic();/g" "$HTML_FILE"
            sed -i "s/MUSIC_FILE_PLACEHOLDER/assets\/$MUSIC_FILENAME/g" "$HTML_FILE"
          fi
        else
          echo "üîá Music integration disabled"
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/MUSIC_INIT_PLACEHOLDER//g" "$HTML_FILE"
            sed -i '' "s/MUSIC_FILE_PLACEHOLDER//g" "$HTML_FILE"
          else
            sed -i "s/MUSIC_INIT_PLACEHOLDER//g" "$HTML_FILE"
            sed -i "s/MUSIC_FILE_PLACEHOLDER//g" "$HTML_FILE"
          fi
        fi
        
        echo "‚úÖ Immersive panorama viewer created: ${{ inputs.output_folder }}/${{ inputs.output_filename }}"
        
    - name: Validate immersive panorama viewer
      shell: bash
      run: |
        echo "‚úÖ Validating immersive panorama viewer..."
        
        # Check core files exist
        HTML_FILE="${{ inputs.output_folder }}/${{ inputs.output_filename }}"
        SCRIPT_FILE="${{ inputs.output_folder }}/panorama-script.js"
        
        if [ ! -f "$HTML_FILE" ]; then
          echo "‚ùå HTML viewer file not found: $HTML_FILE"
          exit 1
        fi
        
        if [ ! -f "$SCRIPT_FILE" ]; then
          echo "‚ùå Panorama script not found: $SCRIPT_FILE"
          exit 1
        fi
        
        # Check assets
        if [ "$POINTCLOUD_READY" = "true" ]; then
          PLY_FILE="${{ inputs.output_folder }}/assets/panorama.ply"
          if [ ! -f "$PLY_FILE" ]; then
            echo "‚ùå Panorama PLY not found: $PLY_FILE"
            exit 1
          fi
          echo "‚úÖ Pointcloud PLY file: $(basename "$PLY_FILE")"
        fi
        
        IMAGE_FILE="${{ inputs.output_folder }}/assets/panorama-image.jpg"
        if [ ! -f "$IMAGE_FILE" ]; then
          echo "‚ùå Panorama image not found: $IMAGE_FILE"
          exit 1
        fi
        echo "‚úÖ Panorama image: $(basename "$IMAGE_FILE")"
        
        # Check shared components
        SHARED_COUNT=$(find "${{ inputs.output_folder }}/shared-components" -name "*.js" 2>/dev/null | wc -l)
        echo "‚úÖ Shared components: $SHARED_COUNT files"
        
        # Music check
        if [ "${{ inputs.enable_music }}" = "true" ] && [ -n "${{ inputs.music_file }}" ]; then
          MUSIC_FILE="${{ inputs.output_folder }}/assets/$(basename "${{ inputs.music_file }}")"
          if [ -f "$MUSIC_FILE" ]; then
            echo "‚úÖ Music file: $(basename "$MUSIC_FILE")"
          else
            echo "‚ö†Ô∏è Music file not found but music enabled"
          fi
        fi
        
        echo ""
        echo "üåü Immersive 360¬∞ Panorama Pointcloud Viewer created successfully!"
        echo "üìÑ HTML viewer: ${{ inputs.output_folder }}/${{ inputs.output_filename }}"
        echo "üìú Main script: panorama-script.js"
        echo "üéØ Mode: $([ "$POINTCLOUD_READY" = "true" ] && echo "Immersive Pointcloud" || echo "Panorama Image Only")"
        echo "üé® Particle density: ${{ inputs.particle_density }}"
        echo "üéµ Music: $([ "${{ inputs.enable_music }}" = "true" ] && echo "Enabled" || echo "Disabled")"