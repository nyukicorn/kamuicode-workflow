name: 'Image World Analysis'
description: 'Analyze images (prompts/URLs/files) to extract comprehensive world characteristics and visual properties'
author: 'KamuiCode Workflow'

inputs:
  image-prompt:
    description: 'The image prompt to analyze for world building'
    required: false
  image-url:
    description: 'URL of image to analyze for world characteristics'
    required: false
  image-file:
    description: 'Path to local image file for analysis'
    required: false
  folder-name:
    description: 'The folder name for storing analysis files'
    required: true
  branch-name:
    description: 'The branch to work on'
    required: true
  oauth-token:
    description: 'Claude Code OAuth token'
    required: true
  skip-commit:
    description: 'Skip commit and push step (for multimodal workflows)'
    required: false
    default: 'false'

outputs:
  analysis-completed:
    description: 'Whether analysis was completed successfully'
    value: ${{ steps.analysis.outputs.completed }}
  scene-type:
    description: 'Analyzed scene type (static/dynamic/dramatic)'
    value: ${{ steps.analysis.outputs.scene-type }}
  atmosphere:
    description: 'Overall atmosphere (peaceful/energetic/mysterious/etc)'
    value: ${{ steps.analysis.outputs.atmosphere }}
  depth-mode:
    description: 'Recommended depth enhancement (normal/enhanced)'
    value: ${{ steps.analysis.outputs.depth-mode }}
  lighting-style:
    description: 'Lighting characteristics (soft/bright/dramatic/etc)'
    value: ${{ steps.analysis.outputs.lighting-style }}
  movement-energy:
    description: 'Movement energy level (1-10 scale)'
    value: ${{ steps.analysis.outputs.movement-energy }}
  color-temperature:
    description: 'Color temperature (warm/cool/neutral)'
    value: ${{ steps.analysis.outputs.color-temperature }}
  perspective-depth:
    description: 'Spatial depth perception (shallow/moderate/deep)'
    value: ${{ steps.analysis.outputs.perspective-depth }}
  visual-complexity:
    description: 'Visual complexity level (simple/moderate/complex)'
    value: ${{ steps.analysis.outputs.visual-complexity }}
  artistic-style:
    description: 'Artistic movement/style (realistic/impressionistic/abstract/etc)'
    value: ${{ steps.analysis.outputs.artistic-style }}
  cultural-context:
    description: 'Cultural/regional context (western/eastern/global/etc)'
    value: ${{ steps.analysis.outputs.cultural-context }}
  time-period:
    description: 'Implied time period (vintage/contemporary/futuristic)'
    value: ${{ steps.analysis.outputs.time-period }}
  image-quality:
    description: 'Image quality assessment (lo-fi/hi-fi/professional)'
    value: ${{ steps.analysis.outputs.image-quality }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Claude Code SDK
      shell: bash
      run: npm install @anthropic-ai/claude-code
    
    - name: 画像世界観分析エージェント
      id: analysis
      shell: bash
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.oauth-token }}
      run: |
        echo "::group::🎨 Image World Analysis Agent Execution"
        echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
        
        # 設定と入力形式判定
        IMAGE_PROMPT="${{ inputs.image-prompt }}"
        IMAGE_URL="${{ inputs.image-url }}"
        IMAGE_FILE="${{ inputs.image-file }}"
        FOLDER_NAME="${{ inputs.folder-name }}"
        ANALYSIS_DIR="$FOLDER_NAME/world-analysis"
        
        # 入力形式の判定
        INPUT_TYPE=""
        INPUT_SOURCE=""
        if [ -n "$IMAGE_PROMPT" ]; then
          INPUT_TYPE="prompt"
          INPUT_SOURCE="$IMAGE_PROMPT"
          echo "Input type: Text prompt"
          echo "Image prompt: $IMAGE_PROMPT"
        elif [ -n "$IMAGE_URL" ]; then
          INPUT_TYPE="url"
          INPUT_SOURCE="$IMAGE_URL"
          echo "Input type: Image URL"
          echo "Image URL: $IMAGE_URL"
        elif [ -n "$IMAGE_FILE" ]; then
          INPUT_TYPE="file"
          INPUT_SOURCE="$IMAGE_FILE"
          echo "Input type: Image file"
          echo "Image file: $IMAGE_FILE"
        else
          echo "::error::❌ No input provided. Please specify image-prompt, image-url, or image-file"
          exit 1
        fi
        
        echo "Analysis folder: $ANALYSIS_DIR"
        
        # 分析フォルダを事前に作成
        if [ ! -d "$ANALYSIS_DIR" ]; then
          mkdir -p "$ANALYSIS_DIR"
          echo "📁 Created analysis folder: $ANALYSIS_DIR"
        fi
        
        # プロンプトの構築
        PROMPT="あなたは画像から包括的な世界観特性を抽出する専門家です。入力形式に応じて適切に分析し、汎用的な世界観データを生成してください。

        **入力情報**:
        - **入力形式**: $INPUT_TYPE ($INPUT_TYPE = prompt/url/file)
        - **分析対象**: $INPUT_SOURCE

        **包括的分析タスク**:
        
        **基本世界観特性**:
        1. **シーンタイプ**: static/dynamic/dramatic のいずれかを判定
        2. **雰囲気**: peaceful/energetic/mysterious/dramatic/romantic/adventurous等を特定
        3. **深度モード**: normal(標準)/enhanced(強調)のどちらが適切かを判定
        4. **照明スタイル**: soft/bright/dramatic/dim/warm/cool等の特性
        5. **動きエネルギー**: 1-10のスケールで動きの激しさを評価
        6. **色温度**: warm(暖色系)/cool(寒色系)/neutral(中性)を判定

        **新規追加分析要素**:
        7. **空間特性**: 
           - perspective_depth: shallow/moderate/deep (奥行き感)
           - subject_distance: close/medium/distant (被写体との距離感)
           - environmental_scale: intimate/spacious/vast (環境スケール)
        8. **動的特性**:
           - implied_movement: still/gentle/active (暗示される動き)
           - visual_complexity: simple/moderate/complex (視覚的複雑度)
           - composition_balance: stable/dynamic/tension (構図バランス)
        9. **文化特性**:
           - artistic_style: realistic/impressionistic/abstract/surreal等 (芸術様式)
           - cultural_context: western/eastern/global/fusion等 (文化的背景)
           - time_period: vintage/contemporary/futuristic (時代性)
        10. **技術特性**:
            - image_quality: lo-fi/hi-fi/professional (画質評価)
            - artistic_processing: natural/processed/heavily_modified (加工度)

        **入力形式別処理**:
        - **prompt**: テキスト内容から世界観を推論
        - **url**: 指定URLの画像を取得・分析（可能な場合）
        - **file**: 指定ファイルパスの画像を分析（可能な場合）

        **エラー耐性**: 分析困難な要素は\"moderate\"や\"unknown\"等のデフォルト値を使用
        
        **必須出力ファイル**:
        1. **$ANALYSIS_DIR/image-analysis.json** - 機械処理用の構造化データ
        2. **$ANALYSIS_DIR/image-analysis.md** - 人間確認用の詳細分析結果
        3. **$ANALYSIS_DIR/recommendations.txt** - 設定推奨値（1行形式）

        **JSONフォーマット例**:
        \`\`\`json
        {
          \"scene_type\": \"dynamic\",
          \"atmosphere\": \"peaceful\",
          \"depth_mode\": \"enhanced\",
          \"lighting_style\": \"soft\",
          \"movement_energy\": 3,
          \"color_temperature\": \"warm\",
          \"perspective_depth\": \"moderate\",
          \"subject_distance\": \"medium\",
          \"environmental_scale\": \"spacious\",
          \"implied_movement\": \"gentle\",
          \"visual_complexity\": \"moderate\",
          \"composition_balance\": \"stable\",
          \"artistic_style\": \"realistic\",
          \"cultural_context\": \"western\",
          \"time_period\": \"contemporary\",
          \"image_quality\": \"hi-fi\",
          \"artistic_processing\": \"natural\",
          \"confidence\": 0.85,
          \"input_type\": \"$INPUT_TYPE\"
        }
        \`\`\`

        **重要な注意点**:
        1. 必ず3つのファイルすべてを作成してください
        2. JSON形式は厳密に従ってください（機械処理用）
        3. 分析理由を明確に記述してください
        4. 360度パノラマ・ポイントクラウド体験に最適化した推奨を行ってください
        5. ファイル作成後、ファイルパスを確認・報告してください"
        
        echo "🚀 Starting Image World Analysis Agent Claude Code CLI..."
        echo "📝 Prompt length: ${#PROMPT}"
        
        # Claude Code CLIの実行
        npx @anthropic-ai/claude-code \
          --allowedTools "Read,Write,Edit,Bash" \
          --max-turns 15 \
          --verbose \
          --permission-mode "bypassPermissions" \
          -p "$PROMPT" || {
            echo "::error::❌ Claude Code CLI execution failed"
            exit 1
          }
        
        # 生成された分析結果の確認
        echo ""
        echo "📋 Checking generated analysis files..."
        
        # JSON分析結果の確認と出力設定
        if [ -f "$ANALYSIS_DIR/image-analysis.json" ]; then
          echo "::notice::✅ Image analysis JSON generated"
          
          # jqがない場合の代替手段でJSONから値を抽出
          SCENE_TYPE=$(grep -o '"scene_type"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          ATMOSPHERE=$(grep -o '"atmosphere"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          DEPTH_MODE=$(grep -o '"depth_mode"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          LIGHTING_STYLE=$(grep -o '"lighting_style"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          MOVEMENT_ENERGY=$(grep -o '"movement_energy"[[:space:]]*:[[:space:]]*[0-9]*' "$ANALYSIS_DIR/image-analysis.json" | cut -d':' -f2 | tr -d ' ')
          COLOR_TEMPERATURE=$(grep -o '"color_temperature"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          
          # 新規追加要素の抽出
          PERSPECTIVE_DEPTH=$(grep -o '"perspective_depth"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          VISUAL_COMPLEXITY=$(grep -o '"visual_complexity"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          ARTISTIC_STYLE=$(grep -o '"artistic_style"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          CULTURAL_CONTEXT=$(grep -o '"cultural_context"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          TIME_PERIOD=$(grep -o '"time_period"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          IMAGE_QUALITY=$(grep -o '"image_quality"[[:space:]]*:[[:space:]]*"[^"]*"' "$ANALYSIS_DIR/image-analysis.json" | cut -d'"' -f4)
          
          echo "Scene type: $SCENE_TYPE"
          echo "Atmosphere: $ATMOSPHERE"
          echo "Depth mode: $DEPTH_MODE"
          echo "Lighting style: $LIGHTING_STYLE"
          echo "Movement energy: $MOVEMENT_ENERGY"
          echo "Color temperature: $COLOR_TEMPERATURE"
          echo "Perspective depth: $PERSPECTIVE_DEPTH"
          echo "Visual complexity: $VISUAL_COMPLEXITY"
          echo "Artistic style: $ARTISTIC_STYLE"
          echo "Cultural context: $CULTURAL_CONTEXT"
          echo "Time period: $TIME_PERIOD"
          echo "Image quality: $IMAGE_QUALITY"
          
          # GitHub Outputに設定（基本要素）
          echo "scene-type=$SCENE_TYPE" >> $GITHUB_OUTPUT
          echo "atmosphere=$ATMOSPHERE" >> $GITHUB_OUTPUT
          echo "depth-mode=$DEPTH_MODE" >> $GITHUB_OUTPUT
          echo "lighting-style=$LIGHTING_STYLE" >> $GITHUB_OUTPUT
          echo "movement-energy=$MOVEMENT_ENERGY" >> $GITHUB_OUTPUT
          echo "color-temperature=$COLOR_TEMPERATURE" >> $GITHUB_OUTPUT
          
          # GitHub Outputに設定（新規追加要素）
          echo "perspective-depth=${PERSPECTIVE_DEPTH:-moderate}" >> $GITHUB_OUTPUT
          echo "visual-complexity=${VISUAL_COMPLEXITY:-moderate}" >> $GITHUB_OUTPUT
          echo "artistic-style=${ARTISTIC_STYLE:-realistic}" >> $GITHUB_OUTPUT
          echo "cultural-context=${CULTURAL_CONTEXT:-global}" >> $GITHUB_OUTPUT
          echo "time-period=${TIME_PERIOD:-contemporary}" >> $GITHUB_OUTPUT
          echo "image-quality=${IMAGE_QUALITY:-hi-fi}" >> $GITHUB_OUTPUT
        else
          echo "::error::❌ Image analysis JSON file not found"
          exit 1
        fi
        
        # 推奨設定の確認
        if [ -f "$ANALYSIS_DIR/recommendations.txt" ]; then
          echo "::notice::✅ Recommendations generated"
          echo "Recommendations:"
          cat "$ANALYSIS_DIR/recommendations.txt"
        else
          echo "::warning::⚠️ Recommendations file not found"
        fi
        
        # 分析文書の確認
        if [ -f "$ANALYSIS_DIR/image-analysis.md" ]; then
          echo "::notice::✅ Analysis document generated"
          echo "First 10 lines of analysis:"
          head -10 "$ANALYSIS_DIR/image-analysis.md"
        else
          echo "::warning::⚠️ Analysis document not found"
        fi
        
        echo "completed=true" >> $GITHUB_OUTPUT
        
        echo "::endgroup::"
    
    - name: Commit and push analysis
      if: ${{ inputs.skip-commit != 'true' }}
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.folder-name }}/
        if git diff --cached --quiet; then
          echo "No analysis files to commit"
        else
          if [ -n "${{ inputs.image-prompt }}" ]; then
            git commit -m "Add image world analysis for prompt: ${{ inputs.image-prompt }}"
          elif [ -n "${{ inputs.image-url }}" ]; then
            git commit -m "Add image world analysis for URL: ${{ inputs.image-url }}"
          else
            git commit -m "Add image world analysis for file: ${{ inputs.image-file }}"
          fi
          # Pull before push to handle concurrent commits
          for i in {1..3}; do
            git add . && git pull origin ${{ inputs.branch-name }} --rebase && git push origin ${{ inputs.branch-name }} && break
            echo "Push attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
        fi
    
    - name: Skip commit message
      if: ${{ inputs.skip-commit == 'true' }}
      shell: bash
      run: |
        echo "::notice::⏭️ Commit and push skipped for multimodal workflow"