name: '360° Panorama Point Cloud Generation'
description: 'Generates 3D point cloud data from 360-degree panorama images using MiDaS depth estimation and spherical coordinate transformation'
author: 'kamuicode Creative Workshop'

branding:
  icon: 'globe'
  color: 'blue'

inputs:
  panorama_image_path:
    description: '360-degree panorama image path (equirectangular projection, 2:1 aspect ratio recommended)'
    required: true
  
  output_directory:
    description: 'Output directory for generated PLY files and assets'
    required: false
    default: 'assets'
  
  sphere_radius:
    description: 'Base sphere radius for particle placement'
    required: false
    default: '200'
  
  depth_resolution:
    description: 'Resolution for depth analysis (format: WIDTHxHEIGHT)'
    required: false
    default: '1024x512'
  
  particle_density:
    description: 'Particle density level (low/medium/high)'
    required: false
    default: 'medium'
  
  depth_variation:
    description: 'Depth-based radius variation factor (0.0-1.0)'
    required: false
    default: '0.4'
  
  enable_pole_compression:
    description: 'Enable pole area compression to reduce distortion'
    required: false
    default: 'true'
  
  depth_inversion:
    description: 'Invert depth values (far becomes near, near becomes far)'
    required: false
    default: 'false'

outputs:
  panorama_ply_path:
    description: 'Path to generated PLY point cloud file'
  
  depth_map_path:
    description: 'Path to generated depth map (PNG)'
  
  particle_count:
    description: 'Number of particles generated'
  
  processing_time:
    description: 'Total processing time in seconds'
  
  sphere_info:
    description: 'Sphere configuration details (radius, variation, etc.)'

runs:
  using: 'composite'
  steps:
    - name: Setup Python Environment
      shell: bash
      run: |
        echo "🐍 Setting up Python environment for panorama depth estimation..."
        python3 -m pip install --upgrade pip
        python3 -m pip install numpy opencv-python Pillow torch torchvision
        echo "✅ Python dependencies installed"

    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: .github/actions/kamui-modules/pointcloud-panorama-generation/package.json

    - name: Install Node.js Dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "📦 Installing Node.js dependencies..."
        echo "📁 Working directory: $(pwd)"
        echo "📋 Files in directory:"
        ls -la
        if [ -f "package-lock.json" ]; then
          echo "🔒 Using package-lock.json (npm ci)"
          npm ci
        else
          echo "📦 Using package.json (npm install)"
          npm install
        fi
        echo "✅ Node.js dependencies installed successfully"

    - name: Validate Input Parameters
      shell: bash
      run: |
        echo "🔍 Validating panorama generation parameters..."
        
        # Check if panorama image exists
        if [[ ! -f "${{ inputs.panorama_image_path }}" ]]; then
          echo "❌ Error: Panorama image not found at ${{ inputs.panorama_image_path }}"
          exit 1
        fi
        
        # Validate sphere radius
        if [[ ! "${{ inputs.sphere_radius }}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "❌ Error: Invalid sphere radius: ${{ inputs.sphere_radius }}"
          exit 1
        fi
        
        # Validate depth variation
        if [[ ! "${{ inputs.depth_variation }}" =~ ^0?\.[0-9]+$|^1\.0*$ ]]; then
          echo "❌ Error: Depth variation must be between 0.0 and 1.0"
          exit 1
        fi
        
        # Validate particle density
        if [[ ! "${{ inputs.particle_density }}" =~ ^(low|medium|high)$ ]]; then
          echo "❌ Error: Particle density must be 'low', 'medium', or 'high'"
          exit 1
        fi
        
        echo "✅ Input validation passed"

    - name: Create Output Directory
      shell: bash
      run: |
        mkdir -p "${{ inputs.output_directory }}"
        echo "📁 Output directory created: ${{ inputs.output_directory }}"

    - name: Generate MiDaS Depth Estimation
      shell: bash
      run: |
        echo "🧠 Starting MiDaS depth estimation for panorama..."
        START_TIME=$(date +%s)
        
        # Use external Python script for panorama depth estimation
        cp "${{ github.action_path }}/scripts/panorama_depth_estimation.py" .
        
        # Run depth estimation
        python3 panorama_depth_estimation.py \
          "${{ inputs.panorama_image_path }}" \
          "${{ inputs.output_directory }}" \
          "${{ inputs.depth_resolution }}"
        
        DEPTH_TIME=$(($(date +%s) - START_TIME))
        echo "⏱️ Depth estimation completed in ${DEPTH_TIME}s"

    - name: Generate Spherical PLY File
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "🌐 Generating spherical PLY point cloud..."
        START_TIME=$(date +%s)
        
        # Debug: Check working directory and files
        echo "📁 Current working directory: $(pwd)"
        echo "📋 Action path files:"
        ls -la "${{ github.action_path }}"
        echo "📋 Scripts directory:"
        ls -la "${{ github.action_path }}/scripts/" || echo "❌ Scripts directory not found"
        
        # Find the generated depth files
        PANORAMA_BASE=$(basename "${{ inputs.panorama_image_path }}" | sed 's/\.[^.]*$//')
        DEPTH_GRAY_PATH="${{ inputs.output_directory }}/${PANORAMA_BASE}_depth_gray.png"
        
        echo "🔍 Debug information:"
        echo "   Panorama base: ${PANORAMA_BASE}"
        echo "   Depth path: ${DEPTH_GRAY_PATH}"
        echo "   Panorama image: ${{ inputs.panorama_image_path }}"
        echo "   Output directory: ${{ inputs.output_directory }}"
        
        # Check if depth file exists
        if [[ ! -f "${DEPTH_GRAY_PATH}" ]]; then
          echo "❌ Depth file not found: ${DEPTH_GRAY_PATH}"
          echo "📁 Available files in output directory:"
          ls -la "${{ inputs.output_directory }}" || echo "Output directory doesn't exist"
          exit 1
        fi
        
        # Check if panorama image exists
        if [[ ! -f "${{ inputs.panorama_image_path }}" ]]; then
          echo "❌ Panorama image not found: ${{ inputs.panorama_image_path }}"
          exit 1
        fi
        
        # Run PLY generation with full path
        echo "🚀 Starting Node.js PLY generation..."
        node "${{ github.action_path }}/scripts/panorama_ply_generator.js" \
          "${DEPTH_GRAY_PATH}" \
          "${{ inputs.panorama_image_path }}" \
          --sphereRadius "${{ inputs.sphere_radius }}" \
          --depthVariation "${{ inputs.depth_variation }}" \
          --enablePoleCompression "${{ inputs.enable_pole_compression }}" \
          --depthInversion "${{ inputs.depth_inversion }}" \
          --particleDensity "${{ inputs.particle_density }}" \
          --outputDir "${{ inputs.output_directory }}"
        
        NODE_EXIT_CODE=$?
        echo "📊 Node.js exit code: ${NODE_EXIT_CODE}"
        
        if [ ${NODE_EXIT_CODE} -ne 0 ]; then
          echo "❌ PLY generation failed with exit code: ${NODE_EXIT_CODE}"
          exit ${NODE_EXIT_CODE}
        fi
        
        PLY_TIME=$(($(date +%s) - START_TIME))
        echo "⏱️ PLY generation completed successfully in ${PLY_TIME}s"

    - name: Generate Processing Summary
      shell: bash
      run: |
        echo "📋 Generating processing summary..."
        
        # Calculate total processing time
        TOTAL_TIME=$(($(date +%s) - START_TIME))
        
        # Create summary report
        cat > "${{ inputs.output_directory }}/panorama_generation_report.md" <<- EOF
        # 🌐 Panorama Point Cloud Generation Report
        
        ## Input Parameters
        - **Panorama Image**: \`${{ inputs.panorama_image_path }}\`
        - **Output Directory**: \`${{ inputs.output_directory }}\`
        - **Sphere Radius**: ${{ inputs.sphere_radius }}
        - **Depth Resolution**: ${{ inputs.depth_resolution }}
        - **Particle Density**: ${{ inputs.particle_density }}
        - **Depth Variation**: ${{ inputs.depth_variation }}
        - **Pole Compression**: ${{ inputs.enable_pole_compression }}
        - **Depth Inversion**: ${{ inputs.depth_inversion }}

        ## Processing Results
        - **Total Processing Time**: ${TOTAL_TIME}s
        - **Generated Files**:
          - Depth Map (Gray): \`${PANORAMA_BASE}_depth_gray.png\`
          - Depth Map (Color): \`${PANORAMA_BASE}_depth.png\`
          - PLY Point Cloud: \`${PANORAMA_BASE}_panorama_sphere.ply\`
        
        ## Technical Details
        - **Coordinate System**: Spherical (radius-based depth variation)
        - **Depth Estimation**: MiDaS-style simulation with panorama corrections
        - **Pole Compression**: Applied to reduce equirectangular distortion
        - **Seamline Continuity**: Ensured for 360° experience
        
        Generated on: $(date)
        EOF
        
        echo "📊 Processing Summary:"
        echo "   Total time: ${TOTAL_TIME}s"
        echo "   Report: ${{ inputs.output_directory }}/panorama_generation_report.md"
        
        # Set final outputs
        echo "processing_time=${TOTAL_TIME}" >> $GITHUB_OUTPUT

    - name: Cleanup Temporary Files
      shell: bash
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f panorama_depth_estimation.py
        rm -f panorama_ply_generator.js
        echo "✅ Cleanup completed"