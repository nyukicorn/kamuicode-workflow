name: 'Image Generation'
description: 'Generate images using Imagen4 Fast via KamuiCode MCP'
author: 'KamuiCode Workflow'

inputs:
  image-prompt:
    description: 'The image generation prompt'
    required: true
  folder-name:
    description: 'The folder name for storing image files'
    required: true
  branch-name:
    description: 'The branch to work on'
    required: true
  oauth-token:
    description: 'Claude Code OAuth token'
    required: true
  mcp-config:
    description: 'MCP configuration JSON'
    required: true

outputs:
  image-completed:
    description: 'Whether image generation was completed successfully'
    value: ${{ steps.image.outputs.completed }}
  google-image-url:
    description: 'Google URL of the generated image'
    value: ${{ steps.image.outputs.google-image-url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Claude Code SDK
      shell: bash
      run: npm install @anthropic-ai/claude-code
    
    - name: 画像生成エージェント (Imagen4 Fast)
      id: image
      shell: bash
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.oauth-token }}
      run: |
        echo "::group::🎨 Image Generation (Imagen4 Fast)"
        echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
        
        # 設定
        IMAGE_PROMPT="${{ inputs.image-prompt }}"
        FOLDER_NAME="${{ inputs.folder-name }}"
        IMAGES_DIR="$FOLDER_NAME/images"
        
        echo "Image prompt: $IMAGE_PROMPT"
        echo "Target folder: $IMAGES_DIR"
        
        # 画像フォルダを事前に作成
        if [ ! -d "$IMAGES_DIR" ]; then
          mkdir -p "$IMAGES_DIR"
          echo "📁 Created images folder: $IMAGES_DIR"
        fi
        
        # MCP設定の確認
        MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
        MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
        
        echo "📋 MCP Configuration Check:"
        echo "Working directory: $(pwd)"
        echo "MCP config path: $MCP_CONFIG_PATH"
        echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
        echo "Allowed tools: mcp__t2i-fal-imagen4-fast__imagen4_fast_submit,mcp__t2i-fal-imagen4-fast__imagen4_fast_status,mcp__t2i-fal-imagen4-fast__imagen4_fast_result,Bash"
        
        # Create MCP config file from GitHub Secret
        mkdir -p .claude
        echo '${{ inputs.mcp-config }}' > "$MCP_CONFIG_ABS_PATH"
        echo "✅ MCP config file created from GitHub Secret"
        
        # MCP設定ファイルの確認
        if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
          echo "✅ MCP config file exists at: $MCP_CONFIG_ABS_PATH"
          echo "MCP servers configured:"
          jq -r '.mcpServers | keys[]' "$MCP_CONFIG_ABS_PATH" || true
        else
          echo "❌ MCP config file creation failed"
          exit 1
        fi
        
        # プロンプトの構築
        PROMPT="画像生成を実行してください。
        **画像プロンプト（原文）**: $IMAGE_PROMPT
        **重要**: 画像プロンプトが日本語の場合は、必ず英語に翻訳してからImagen4 Fastに送信してください。英語の場合はそのまま使用してください。
        **実行手順**:
        1. 画像プロンプトの言語判定と翻訳（必要に応じて日本語→英語）
        2. 翻訳済み英語プロンプトを使用してImagen4 Fastで画像生成
        3. \`mcp__t2i-fal-imagen4-fast__imagen4_fast_submit\`ツールで画像生成を開始
        4. \`mcp__t2i-fal-imagen4-fast__imagen4_fast_status\`でステータス確認
        5. \`mcp__t2i-fal-imagen4-fast__imagen4_fast_result\`で結果取得してGoogle URLを取得
        6. **重要**: 生成時に取得したGoogle URLを「$FOLDER_NAME/google-image-url.txt」ファイルに保存
        7. 取得したGoogle URLをBashツールで「$IMAGES_DIR/generated-image.png」にダウンロード保存
        **重要な注意点**:
        - Google URLの有効期限は約1時間のため、生成後すぐにダウンロード
        - 必ずGoogle提供の認証済URLを使用
        - 画像は必ず「$IMAGES_DIR」ディレクトリに保存
        - ファイル名は「generated-image.png」とする
        - **最重要**: 生成時のGoogle URLを「$FOLDER_NAME/google-image-url.txt」に保存し、次のジョブで参照できるようにする
        - **両方を実行**: ①Google URLをテキストファイルに保存 ②Google URLから画像をダウンロードしてローカル保存
        
        **保存先**:
        - 画像ディレクトリ: $IMAGES_DIR
        - 画像ファイル: generated-image.png
        - Google URL保存ファイル: $FOLDER_NAME/google-image-url.txt"
        
        echo "🚀 Starting Image Generation Agent Claude Code CLI..."
        echo "📝 Prompt length: ${#PROMPT}"
        
        # Claude Code CLIの実行
        npx @anthropic-ai/claude-code \
          --mcp-config="$MCP_CONFIG_ABS_PATH" \
          --allowedTools "mcp__t2i-fal-imagen4-fast__imagen4_fast_submit,mcp__t2i-fal-imagen4-fast__imagen4_fast_status,mcp__t2i-fal-imagen4-fast__imagen4_fast_result,Bash" \
          --max-turns 25 \
          --verbose \
          --permission-mode "acceptEdits" \
          -p "$PROMPT" || {
            echo "::error::❌ Claude Code CLI execution failed"
            exit 1
          }
        
        # 生成された画像の確認
        echo ""
        echo "📸 Checking generated images..."
        if [ -d "$IMAGES_DIR" ]; then
          IMAGE_COUNT=$(find "$IMAGES_DIR" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
          echo "::notice::📸 Generated $IMAGE_COUNT images"
          if [ "$IMAGE_COUNT" -gt 0 ]; then
            echo "Image files:"
            FIRST_IMAGE=$(find "$IMAGES_DIR" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -1)
            echo "First image: $FIRST_IMAGE"
            
            # Google URLを確認してGitHub Outputに設定
            if [ -f "$FOLDER_NAME/google-image-url.txt" ]; then
              GOOGLE_URL=$(cat "$FOLDER_NAME/google-image-url.txt")
              echo "Google image URL: $GOOGLE_URL"
              echo "google-image-url=$GOOGLE_URL" >> $GITHUB_OUTPUT
            else
              echo "::warning::⚠️ Google image URL not found in file"
              echo "google-image-url=" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::❌ No image files were generated"
            exit 1
          fi
        else
          echo "::error::❌ Images directory not found"
          exit 1
        fi
        
        echo "completed=true" >> $GITHUB_OUTPUT
        echo "::endgroup::"
    
    - name: Commit and push image
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.folder-name }}/
        if git diff --cached --quiet; then
          echo "No image files to commit"
        else
          git commit -m "Add generated image: ${{ inputs.image-prompt }}"
          git push origin ${{ inputs.branch-name }}
        fi