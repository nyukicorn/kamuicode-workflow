name: 'Video Concatenation & Music Integration'
description: 'Concatenate video segments and integrate with music using ffmpeg'
author: 'KamuiCode Workflow'

inputs:
  folder-name:
    description: 'The folder name containing video and music files'
    required: true
  branch-name:
    description: 'The branch to work on'
    required: true
  oauth-token:
    description: 'Claude Code OAuth token'
    required: true

outputs:
  concatenation-completed:
    description: 'Whether video concatenation was completed successfully'
    value: ${{ steps.concat.outputs.completed }}
  final-video-path:
    description: 'Path to the final music video'
    value: ${{ steps.concat.outputs.final-video-path }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Claude Code SDK
      shell: bash
      run: npm install @anthropic-ai/claude-code
    
    - name: ÂãïÁîªÈÄ£Áµê„ÉªÈü≥Ê•ΩÁµ±Âêà„Ç®„Éº„Ç∏„Çß„É≥„Éà
      id: concat
      shell: bash
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.oauth-token }}
      run: |
        echo "::group::üé¨ Video Concatenation & Music Integration Agent"
        echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
        
        # Ë®≠ÂÆö
        FOLDER_NAME="${{ inputs.folder-name }}"
        VIDEOS_DIR="$FOLDER_NAME/videos"
        MUSIC_DIR="$FOLDER_NAME/music"
        OUTPUT_DIR="$FOLDER_NAME/final"
        
        echo "Folder name: $FOLDER_NAME"
        echo "Videos directory: $VIDEOS_DIR"
        echo "Music directory: $MUSIC_DIR"
        echo "Output directory: $OUTPUT_DIR"
        
        # ÊúÄÁµÇÂá∫Âäõ„Éï„Ç©„É´„ÉÄ„Çí‰ΩúÊàê
        if [ ! -d "$OUTPUT_DIR" ]; then
          mkdir -p "$OUTPUT_DIR"
          echo "üìÅ Created output folder: $OUTPUT_DIR"
        fi
        
        # ÂãïÁîª„Å®Èü≥Ê•Ω„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç
        echo "üìÅ Checking video segments..."
        if [ -d "$VIDEOS_DIR" ]; then
          ls -la "$VIDEOS_DIR"
        else
          echo "‚ùå Videos directory not found: $VIDEOS_DIR"
          exit 1
        fi
        
        echo "üìÅ Checking music files..."
        if [ -d "$MUSIC_DIR" ]; then
          ls -la "$MUSIC_DIR"
        else
          echo "‚ùå Music directory not found: $MUSIC_DIR"
          exit 1
        fi
        
        # Èü≥Ê•Ω„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Å®ÂΩ¢ÂºèÁâπÂÆö
        MUSIC_FILE=""
        if [ -f "$MUSIC_DIR/generated-music.mp3" ]; then
          MUSIC_FILE="$MUSIC_DIR/generated-music.mp3"
          echo "‚úÖ Found music file: $MUSIC_FILE"
        elif [ -f "$MUSIC_DIR/generated-music.wav" ]; then
          MUSIC_FILE="$MUSIC_DIR/generated-music.wav"
          echo "‚úÖ Found music file: $MUSIC_FILE"
        else
          echo "‚ùå Music file not found! Checking all audio files in $MUSIC_DIR..."
          FOUND_MUSIC=$(find "$MUSIC_DIR" -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | head -1)
          if [ -n "$FOUND_MUSIC" ]; then
            MUSIC_FILE="$FOUND_MUSIC"
            echo "‚úÖ Found alternative music file: $MUSIC_FILE"
          else
            echo "‚ùå No audio files found in $MUSIC_DIR"
            exit 1
          fi
        fi
        
        # ÂãïÁîª„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç
        VIDEO_COUNT=$(find "$VIDEOS_DIR" -name "segment-*.mp4" | wc -l)
        echo "üìπ Found $VIDEO_COUNT video segments"
        
        if [ "$VIDEO_COUNT" -eq 0 ]; then
          echo "‚ùå No video segments found"
          exit 1
        fi
        
        # „Éó„É≠„É≥„Éó„Éà„ÅÆÊßãÁØâ
        PROMPT="ffmpeg„ÅßÂãïÁîª„Çª„Ç∞„É°„É≥„Éà„ÇíÈÄ£Áµê„ÅóÈü≥Ê•Ω„Å®Áµ±Âêà„Åó„Å¶„Éü„É•„Éº„Ç∏„ÉÉ„ÇØ„Éì„Éá„Ç™„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        **ÊúÄÈáçË¶Å**: ÊúÄÁµÇÂãïÁîª„Å´Èü≥Ê•Ω„ÇíÂøÖ„ÅöÁµêÂêàÔºàÈü≥Â£∞„Å™„Åó„ÅØÂ§±ÊïóÔºâ
        
        **ÁèæÂú®„ÅÆÁä∂Ê≥Å**:
        - „Éï„Ç©„É´„ÉÄ: $FOLDER_NAME
        - ÂãïÁîª„Éá„Ç£„É¨„ÇØ„Éà„É™: $VIDEOS_DIR („Çª„Ç∞„É°„É≥„ÉàÊï∞: $VIDEO_COUNT)
        - Èü≥Ê•Ω„Éá„Ç£„É¨„ÇØ„Éà„É™: $MUSIC_DIR
        - Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™: $OUTPUT_DIR
        - Èü≥Ê•Ω„Éï„Ç°„Ç§„É´: $MUSIC_FILE
        
        **ÂÆüË°åÊâãÈ†Ü**:
        1. Âà©Áî®ÂèØËÉΩ„Å™ÂãïÁîª„Çª„Ç∞„É°„É≥„Éà„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
        2. Èü≥Ê•Ω„Éï„Ç°„Ç§„É´Ôºà$MUSIC_FILEÔºâ„ÅÆÈï∑„Åï„ÇíÁ¢∫Ë™ç
        3. ffmpeg„ÅßÂãïÁîª„ÇíÈü≥Ê•Ω„ÅÆÈï∑„Åï„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥„ÉªÂª∂Èï∑
        4. Ë§áÊï∞„Çª„Ç∞„É°„É≥„Éà„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÈÄ£Áµê„ÄÅ1„Å§„ÅÆÂ†¥Âêà„ÅØ„É´„Éº„Éó„ÅßÂª∂Èï∑
        5. ffmpeg„ÅßÂãïÁîª„Å®Èü≥Ê•Ω„ÇíÁµ±Âêà
        6. **ÂøÖÈ†à**: '$OUTPUT_DIR/final-music-video.mp4'„Å´‰øùÂ≠ò
        7. ÊúÄÁµÇÂãïÁîª„ÅÆÈü≥Â£∞„Çπ„Éà„É™„Éº„É†Á¢∫Ë™ç
        
        **ffmpeg„Ç≥„Éû„É≥„Éâ‰æã**:
        - ÂãïÁîªÂª∂Èï∑: ffmpeg -i segment-1.mp4 -filter_complex 'loop=loop=7:size=150:start=0' segment-1-extended.mp4
        - Ë§áÊï∞„Çª„Ç∞„É°„É≥„ÉàÈÄ£Áµê: ffmpeg -i seg1.mp4 -i seg2.mp4 -i seg3.mp4 -filter_complex '[0:v][1:v][2:v]concat=n=3:v=1:a=0[outv]' -map '[outv]' video-concatenated.mp4
        - Èü≥Ê•ΩÁµ±Âêà: ffmpeg -i video-concatenated.mp4 -i \"$MUSIC_FILE\" -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 -shortest '$OUTPUT_DIR/final-music-video.mp4'
        - Èü≥Â£∞Á¢∫Ë™ç: ffmpeg -i '$OUTPUT_DIR/final-music-video.mp4' -show_streams -select_streams a
        
        **ÈáçË¶Å‰∫ãÈ†Ö**:
        - ÂøÖ„ÅöÈü≥Ê•Ω„Éï„Ç°„Ç§„É´Ôºà$MUSIC_FILEÔºâ„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        - ÊúÄÁµÇÂãïÁîª„ÅØÈü≥Â£∞„Çπ„Éà„É™„Éº„É†„ÇíÂê´„ÇÄÂøÖË¶Å„Åå„ÅÇ„Çã
        - ÂãïÁîª„ÅÆÈï∑„Åï„ÅØÈü≥Ê•Ω„ÅÆÈï∑„Åï„Å´Âêà„Çè„Åõ„Çã
        - ÊúÄÁµÇ„Éï„Ç°„Ç§„É´„ÅØ '$OUTPUT_DIR/final-music-video.mp4' „Å´‰øùÂ≠ò"
        
        echo "üöÄ Starting Video Concatenation Agent Claude Code CLI..."
        echo "üìù Prompt length: ${#PROMPT}"
        
        # Claude Code CLI„ÅÆÂÆüË°å
        npx @anthropic-ai/claude-code \
          --allowedTools "Read,Write,Bash" \
          --max-turns 70 \
          --verbose \
          --permission-mode "acceptEdits" \
          -p "$PROMPT" || {
            echo "::error::‚ùå Claude Code CLI execution failed"
            exit 1
          }
        
        # ÊúÄÁµÇÂãïÁîª„ÅÆÁ¢∫Ë™ç
        echo ""
        echo "üé¨ Checking final music video..."
        FINAL_VIDEO="$OUTPUT_DIR/final-music-video.mp4"
        
        if [ -f "$FINAL_VIDEO" ]; then
          echo "‚úÖ Final music video created: $FINAL_VIDEO"
          FILE_SIZE=$(ls -lah "$FINAL_VIDEO" | awk '{print $5}')
          echo "File size: $FILE_SIZE"
          
          # Èü≥Â£∞„Çπ„Éà„É™„Éº„É†„ÅÆÁ¢∫Ë™ç
          echo "üîä Checking audio stream..."
          if command -v ffmpeg &> /dev/null; then
            AUDIO_STREAMS=$(ffmpeg -i "$FINAL_VIDEO" -hide_banner -f null - 2>&1 | grep "Stream.*Audio" | wc -l)
            if [ "$AUDIO_STREAMS" -gt 0 ]; then
              echo "‚úÖ Audio stream detected in final video"
            else
              echo "‚ö†Ô∏è No audio stream detected in final video"
            fi
          fi
          
          echo "final-video-path=$FINAL_VIDEO" >> $GITHUB_OUTPUT
          echo "completed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Final music video not created"
          echo "Checking output directory contents:"
          ls -la "$OUTPUT_DIR" || echo "Output directory is empty"
          exit 1
        fi
        
        echo "::endgroup::"
    
    - name: Commit and push final video
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.folder-name }}/
        if git diff --cached --quiet; then
          echo "No final video to commit"
        else
          git commit -m "Add final music video with integrated audio"
          git push origin ${{ inputs.branch-name }}
        fi