name: 'Three.js Scene Generation'
description: 'Generate Three.js 3D scenes with panorama and particles using Three.js MCP'
author: 'KamuiCode Workflow'

inputs:
  experience-concept:
    description: 'The 3D experience concept'
    required: true
  panorama-image-url:
    description: 'Google URL of the panorama image'
    required: true
  include-music:
    description: 'Whether to include music controls'
    required: false
    default: 'false'
  music-url:
    description: 'Google URL of the background music (if applicable)'
    required: false
  particle-enabled:
    description: 'Whether to enable particle effects'
    required: false
    default: 'true'
  particle-count:
    description: 'Number of particles (100-5000)'
    required: false
    default: '1000'
  particle-size:
    description: 'Particle size (0.1-2.0)'
    required: false
    default: '0.5'
  particle-shape:
    description: 'Particle shape (circle/square/triangle/star/heart)'
    required: false
    default: 'circle'
  particle-corner-radius:
    description: 'Particle corner radius (0.0-1.0, for square only)'
    required: false
    default: '0.0'
  particle-color-mode:
    description: 'Particle color mode (single/gradient/rainbow)'
    required: false
    default: 'single'
  particle-base-color:
    description: 'Base particle color (HEX format: #FF0000)'
    required: false
    default: '#FFFFFF'
  folder-name:
    description: 'The folder name for storing Three.js files'
    required: true
  branch-name:
    description: 'The branch to work on'
    required: true
  oauth-token:
    description: 'Claude Code OAuth token'
    required: true

outputs:
  threejs-completed:
    description: 'Whether Three.js scene generation was completed successfully'
    value: ${{ steps.threejs.outputs.completed }}
  scene-files-created:
    description: 'Number of scene files created'
    value: ${{ steps.threejs.outputs.scene-files-created }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Claude Code SDK
      shell: bash
      run: npm install @anthropic-ai/claude-code
    
    - name: Three.js Scene Generation Agent
      id: threejs
      shell: bash
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ inputs.oauth-token }}
      run: |
        echo "::group::🎨 Three.js Scene Generation"
        echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
        
        # 設定
        EXPERIENCE_CONCEPT="${{ inputs.experience-concept }}"
        PANORAMA_URL="${{ inputs.panorama-image-url }}"
        INCLUDE_MUSIC="${{ inputs.include-music }}"
        MUSIC_URL="${{ inputs.music-url }}"
        PARTICLE_ENABLED="${{ inputs.particle-enabled }}"
        PARTICLE_COUNT="${{ inputs.particle-count }}"
        PARTICLE_SIZE="${{ inputs.particle-size }}"
        PARTICLE_SHAPE="${{ inputs.particle-shape }}"
        PARTICLE_CORNER_RADIUS="${{ inputs.particle-corner-radius }}"
        PARTICLE_COLOR_MODE="${{ inputs.particle-color-mode }}"
        PARTICLE_BASE_COLOR="${{ inputs.particle-base-color }}"
        FOLDER_NAME="${{ inputs.folder-name }}"
        SRC_DIR="$FOLDER_NAME/src"
        ASSETS_DIR="$FOLDER_NAME/assets"
        
        echo "Experience concept: $EXPERIENCE_CONCEPT"
        echo "Panorama URL: $PANORAMA_URL"
        echo "Include music: $INCLUDE_MUSIC"
        echo "Particle enabled: $PARTICLE_ENABLED"
        echo "Particle count: $PARTICLE_COUNT"
        echo "Particle size: $PARTICLE_SIZE"
        echo "Target folders: $SRC_DIR, $ASSETS_DIR"
        
        # ディレクトリを事前に作成
        mkdir -p "$SRC_DIR/js"
        mkdir -p "$SRC_DIR/css"
        mkdir -p "$SRC_DIR/libs"
        mkdir -p "$ASSETS_DIR"
        echo "📁 Created directory structure"
        
        # Three.js MCP設定の確認
        MCP_CONFIG_PATH=".claude/mcp-threejs.json"
        MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
        
        echo "📋 Three.js MCP Configuration Check:"
        echo "Working directory: $(pwd)"
        echo "MCP config path: $MCP_CONFIG_PATH"
        echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
        
        # Three.js MCP設定ファイルが存在しない場合は作成
        if [ ! -f "$MCP_CONFIG_ABS_PATH" ]; then
          echo "Creating Three.js MCP configuration..."
          mkdir -p .claude
          cat > "$MCP_CONFIG_ABS_PATH" << 'EOF'
        {
          "mcpServers": {
            "threejs": {
              "type": "http",
              "url": "https://www.pulsemcp.com/servers/locchung-three-js",
              "description": "Three.js MCP Server by Loc Chung for 3D scene manipulation"
            }
          }
        }
        EOF
          echo "✅ Three.js MCP config file created"
        else
          echo "✅ Three.js MCP config file already exists"
        fi
        
        # プロンプトの構築
        MUSIC_INTEGRATION=""
        if [ "$INCLUDE_MUSIC" == "true" ] && [ -n "$MUSIC_URL" ]; then
          MUSIC_INTEGRATION="
        **音楽統合**:
        - BGM URL: $MUSIC_URL
        - HTML5 Audioでの音楽オン/オフボタンを実装
        - ループ再生とボリューム制御機能
        - 音楽ファイルを$SRC_DIR/generated-music.wavにコピー"
        fi
        
        # パーティクル設定の構築
        PARTICLE_INTEGRATION=""
        if [ "$PARTICLE_ENABLED" == "true" ]; then
          PARTICLE_INTEGRATION="
        **パーティクル設定**:
        - パーティクル数: $PARTICLE_COUNT個
        - パーティクルサイズ: $PARTICLE_SIZE
        - 形状: $PARTICLE_SHAPE（固定、初期設定のみ）
        - 角の丸み: $PARTICLE_CORNER_RADIUS（squareの場合のみ適用）
        - 色モード: $PARTICLE_COLOR_MODE（single/gradient/rainbow）
        - ベース色: $PARTICLE_BASE_COLOR
        - 材質: PointsMaterial（色変更対応）
        - アニメーション: 自動回転時に高速化
        - 色実装: 改善版美しい色変更UI（右端縦型、マウスオーバー表示、美しい同系色/多彩色グラデーション）
        - テーマ連動: experience_concept内容に基づいて美しいパーティクルの色調や動きを自動調整"
        else
          PARTICLE_INTEGRATION="
        **パーティクル設定**:
        - パーティクル効果: 無効
        - パーティクルシステムをスキップ"
        fi
        
        PROMPT="安定したThree.js 3D体験シーンを生成してください。

        **体験コンセプト**: 美しい$EXPERIENCE_CONCEPT
        **パノラマ画像URL**: $PANORAMA_URL
        
        **テーマ連動実装**:
        - コンセプト内容を解析して美しいパーティクルの色調、動き、配置を自動調整
        - 例: 「桜」→美しいピンク系色調、「海」→美しい青系色調、「夜」→美しい暗めトーン
        - パーティクル動作もテーマに連動して美しく（花びら→美しく舞う動き、雪→美しい落下動き）
        
        **必須実行手順**:
        1. **ファイル配置（重要）**:
           - パノラマ画像を$ASSETS_DIR/panorama.jpgにダウンロード保存
           - パノラマ画像を$SRC_DIR/panorama.jpgにもコピー（相対パス問題解決）
           - 音楽ファイルがあれば$SRC_DIR/generated-music.wavにもコピー
        
        2. **単一HTMLファイル作成（$SRC_DIR/index.html）**:
           - Three.js CDN使用: https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js
           - OrbitControls使用禁止（カスタム実装必須）
           - 完全なHTML5 Audio実装
           - カスタムマウス/タッチ制御
           - 自動回転機能（ダブルクリック）
           - パーティクルシステム
        
        **必須実装機能**:
        - **マウス制御**: ドラッグで視点移動、ホイールでズーム
        - **タッチ制御**: モバイル対応のタッチ操作
        - **自動回転**: ダブルクリックで時計回り自動回転モード
        - **パーティクル**: 形状選択可能（$PARTICLE_SHAPE）、カスタマイズ可能
          - circle: CircleGeometry使用
          - square: PlaneGeometry + 角丸み実装（corner_radius=$PARTICLE_CORNER_RADIUS）
          - triangle: カスタム三角形ジオメトリ（頂点3つで構成）
          - star: カスタム星形ジオメトリ（5つの尖った頂点）
          - heart: カスタムハート形ジオメトリ（数学的ハート曲線）
        - **UI表示**: 操作説明（マウスドラッグ・ホイール・ダブルクリック）
        - **パーティクル色変更UI**: リアルタイム色変更コントロール（改善版）
          - 画面右端に縦型色変更コントロール（マウスオーバー時表示、通常時半透明）
          - 単色モード: カラーピッカーで任意の色選択
          - グラデーションモード: 同系色グラデーション（ベース色から明度変化でパーティクルごとにランダム配色）
          - レインボーモード: 多彩色グラデーション（HSVカラースペースで様々な色をパーティクルごとに配置）
          - UIデザイン: マウス離脱時opacity:0.3、ホバー時opacity:1.0でアニメーション
          - リアルタイム色更新機能（個別パーティクル色制御対応）
        - **リアルタイム調整コントロール**: 体験中の動的調整機能
          - 回転速度スライダー（0.001 - 0.05、現在値表示付き）
          - パーティクルサイズスライダー（0.1 - 3.0、リアルタイム反映）
          - パーティクル数スライダー（100 - 5000、動的再生成）
          - 各スライダーは右端UIパネル内に配置、ラベル表示付き
        
        **技術要件**:
        - パノラマ: './panorama.jpg'（同じディレクトリの相対パス、../assets/ではない）
        - WebGL対応チェックとエラー表示
        - レスポンシブデザイン
        - すべて単一HTMLファイルに統合
        
        **重要な修正事項**:
        - **マウスドラッグ**: 必ずcanvas要素に正しくイベントリスナーを登録し、視覚的フィードバックを追加
        - **パノラマ読み込み**: 画像読み込み失敗時も適切なデバッグ情報をコンソールに出力
        - **カメラ制御**: マウス操作でカメラの向きが確実に変わるよう実装
        - **エラーハンドリング**: 画像読み込みエラーの詳細をユーザーに表示
        - **パーティクル色動的変更**: 必ずリアルタイムで色変更が機能するよう実装（個別パーティクル色制御対応）
        - **色変更UI実装**: 右端縦型レイアウト、マウスオーバー表示機能、半透明アニメーション必須実装
        - **グラデーション改善**: 単色時は同系色明度変化、レインボー時は多彩色ランダム配置
        - **リアルタイム調整実装**: 必ずスライダー操作でリアルタイム変更が機能するよう実装
          - 回転速度: autoRotationSpeed 変数を直接変更
          - パーティクルサイズ: material.size プロパティを動的変更
          - パーティクル数: パーティクルシステム再生成（scene.remove/add）
        - **形状変更削除**: 動的形状変更機能は削除し、初期形状のみ固定で使用
        
        **禁止事項**:
        - OrbitControls.jsの使用（読み込みエラーの原因）
        - Web Audio APIの使用（デコードエラーの原因）
        - 複数JSファイルへの分割
        - 相対パス '../assets/' の使用（ファイルは同じディレクトリにある）
        
        **実装参考コード構造**:
        - カスタムマウス制御変数とイベントリスナー
        - ダブルクリック自動回転（時計回り）
        - スムーズなカメラアニメーション
        - パーティクルシステムとの連動
        
        $MUSIC_INTEGRATION
        
        $PARTICLE_INTEGRATION
        
        **最終ファイル**: $SRC_DIR/index.html（完全動作する単一ファイル）"
        
        echo "🚀 Starting Three.js Scene Generation Agent..."
        echo "📝 Prompt length: ${#PROMPT}"
        
        # Claude Code CLIの実行
        npx @anthropic-ai/claude-code \
          --mcp-config="$MCP_CONFIG_ABS_PATH" \
          --allowedTools "Bash" \
          --max-turns 30 \
          --verbose \
          --permission-mode "acceptEdits" \
          -p "$PROMPT" || {
            echo "::error::❌ Claude Code CLI execution failed"
            exit 1
          }
        
        # 生成されたファイルの確認
        echo ""
        echo "📸 Checking generated Three.js files..."
        
        # メインHTMLファイルの確認
        if [ -f "$SRC_DIR/index.html" ]; then
          echo "✅ Main HTML file created: $SRC_DIR/index.html"
          HTML_SIZE=$(wc -c < "$SRC_DIR/index.html")
          echo "  HTML file size: $HTML_SIZE bytes"
        else
          echo "::error::❌ Main HTML file not found"
          exit 1
        fi
        
        # パノラマ画像の確認（両方の場所）
        if [ -f "$ASSETS_DIR/panorama.jpg" ]; then
          echo "✅ Panorama image in assets: $ASSETS_DIR/panorama.jpg"
        else
          echo "::warning::⚠️ Panorama image not found in assets"
        fi
        
        if [ -f "$SRC_DIR/panorama.jpg" ]; then
          echo "✅ Panorama image in src: $SRC_DIR/panorama.jpg"
        else
          echo "::warning::⚠️ Panorama image not found in src (may cause loading issues)"
        fi
        
        # 音楽ファイルの確認（音楽が有効な場合）
        if [ "$INCLUDE_MUSIC" == "true" ]; then
          if [ -f "$SRC_DIR/generated-music.wav" ]; then
            echo "✅ Music file in src: $SRC_DIR/generated-music.wav"
            MUSIC_SIZE=$(wc -c < "$SRC_DIR/generated-music.wav")
            echo "  Music file size: $MUSIC_SIZE bytes"
          else
            echo "::warning::⚠️ Music file not found in src (music controls may not work)"
          fi
        fi
        
        # 総ファイル数をカウント
        TOTAL_FILES=$(find "$SRC_DIR" -type f | wc -l)
        echo "scene-files-created=$TOTAL_FILES" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🎉 Three.js scene generation completed with enhanced features:"
        echo "  - Custom mouse/touch controls (no OrbitControls dependency)"
        echo "  - HTML5 Audio music system (no Web Audio API issues)"
        echo "  - Auto-rotation with double-click"
        echo "  - Particle system with rotation sync"
        echo "  - Single HTML file approach"
        
        echo "completed=true" >> $GITHUB_OUTPUT
        echo "::endgroup::"
    
    - name: Commit and push Three.js files
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add ${{ inputs.folder-name }}/
        if git diff --cached --quiet; then
          echo "No Three.js files to commit"
        else
          git commit -m "Add Three.js scene: ${{ inputs.experience-concept }}"
          git push origin ${{ inputs.branch-name }}
        fi